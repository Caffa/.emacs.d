
(1 (wiki-nav . [(1 0 2) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation"))]) (mediawiki . [(2 2 5) nil "mediawiki frontend" single ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki"))]) (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single ((:keywords "convenience" "lisp" "customization" "keyboard" "keys"))]) (keychain-environment . [(2 2 0) nil "load keychain environment variables" single ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh"))]) (key-combo . [(1 6) nil "map key sequence to commands" single ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input"))]) (karma . [(0 1 0) nil "Karma Test Runner Emacs Integration" single ((:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing"))]) (kakapo-mode . [(1 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation"))]) (kaesar-mode . [(0 9 0) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience"))]) (kaesar-file . [(0 9 0) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files"))]) (kaesar . [(0 9 0) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data"))]) (jvm-mode . [(0 2 0) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience"))]) (jump-to-line . [(0 2 0) nil "Jump to line number at point." single ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl"))]) (jump . [(2 3) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation"))]) (jsx-mode . [(0 1 10) nil "major mode for JSX" single ((:url . "https://github.com/jsx/jsx-mode.el"))]) (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ((:url . "http://github.com/sterlingg/json-snatcher"))]) (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" single ((:url . "https://github.com/gongo/json-reformat") (:keywords "json"))]) (json-mode . [(1 6 0) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" single ((:url . "https://github.com/joshwnj/json-mode"))]) (jsfmt . [(0 2 0) nil "No description available." single nil]) (js3-mode . [(1 1 0) nil "An improved JavaScript editing mode" tar ((:keywords "javascript" "languages"))]) (js2-refactor . [(0 7 1) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar nil]) (js2-mode . [(20150909) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript"))]) (js2-highlight-vars . [(0 1 0) ((js2-mode (20150909))) "highlight occurrences of the variable under cursor" single ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode"))]) (js2-closure . [(1 4) ((js2-mode (20140114))) "Google Closure dependency manager" single ((:url . "http://github.com/jart/js2-closure"))]) (js-comint . [(0 0 3) ((nvm (0 2 0))) "Run a JavaScript interpreter in an inferior process window." single ((:url . "https://github.com/redguardtoo/js-comint") (:keywords "javascript" "node" "inferior-mode" "convenience"))]) (jedi-core . [(0 2 7) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar nil]) (jedi . [(0 2 7) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single nil]) (javadoc-lookup . [(1 0 0) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar ((:url . "https://github.com/skeeto/javadoc-lookup"))]) (japanlaw . [(0 9 1) nil "Japan law from law.e-gov.go.jp" single ((:keywords "docs" "help"))]) (jammer . [(0 1 1) nil "Punish yourself for using Emacs inefficiently" single ((:url . "https://github.com/wasamasa/jammer") (:keywords "games"))]) (jade-mode . [(1 0 0) nil "Major mode for editing .jade files" single ((:url . "https://github.com/brianc/jade-mode"))]) (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar nil]) (j-mode . [(1 1 1) nil "Major mode for editing J programs" tar ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges"))]) (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:url . "http://www.github.com/theanalyst/ix.el"))]) (isgd . [(1 1) nil "Shorten URLs using the isgd.com shortener service" single ((:url . "https://github.com/chmouel/isgd.el"))]) (irony . [(0 1 2) ((cl-lib (0 5))) "C/C++ minor mode powered by libclang" tar ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools"))]) (ir-black-theme . [(1 0 1) nil "Port of ir-black theme" single ((:keywords "faces"))]) (iplayer . [(0 1) nil "Browse and download BBC TV/radio shows" single ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc"))]) (interleave . [(1 0 0) nil "Interleaving text books since 2015" single ((:url . "https://github.com/rudolfochrist/interleave"))]) (instapaper . [(0 9 5) nil "No description available." single nil]) (insert-shebang . [(0 9 4) nil "Insert shebang line automatically." single ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience"))]) (inlineR . [(1 0) nil "insert Tag for inline image of R graphics" single ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el"))]) (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar nil]) (initsplit . [(1 6) nil "No description available." single nil]) (init-open-recentf . [(0 0 2) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single ((:keywords "file" "recentf" "after-init-hook"))]) (init-loader . [(0 2) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/"))]) (inflections . [(2 3) nil "convert english words between singular and plural" single ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop"))]) (inf-ruby . [(2 4 0) nil "Run a Ruby process in a buffer" single ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby"))]) (inf-clojure . [(1 4 0) ((emacs (24 1)) (clojure-mode (5 0))) "Run an external Clojure process in an Emacs buffer" single ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure"))]) (import-popwin . [(0 9) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single ((:url . "https://github.com/syohex/emacs-import-popwin"))]) (import-js . [(0 3 1) ((emacs (24))) "Import Javascript dependencies" single ((:url . "http://github.com/trotzig/import-js/") (:keywords "javascript"))]) (immutant-server . [(1 2 0) nil "Run your Immutant server in Emacs" single ((:url . "http://www.github.com/leathekd/immutant-server.el"))]) (imgix . [(1 0 0) ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) "Major mode for editing images in emacs via imgix" tar ((:keywords "images" "image processing" "image editing" "sepia" "blur"))]) (imenus . [(0 1) ((cl-lib (0 5))) "Imenu for multiple buffers" single ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience"))]) (imenu-list . [(0 4) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single ((:url . "https://github.com/bmag/imenu-list"))]) (imenu-anywhere . [(0 9 0) ((cl-lib (0 5))) "ido/helm imenu tag selection across all buffers with the same mode" single ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags"))]) (image-dired+ . [(0 7 2) ((cl-lib (0 3))) "Image-dired extensions" single ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia"))]) (image-archive . [(0 0 7) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia"))]) (image+ . [(0 6 2) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions"))]) (ignoramus . [(0 7 0) nil "Ignore backups, build files, et al." single ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools"))]) (iflipb . [(1 3) nil "interactively flip between recently visited buffers" single ((:url . "http://git.rosdahl.net/?p=joel/iflipb.git"))]) (iedit . [(0 9 9) nil "Edit multiple regions in the same way simultaneously." tar ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring"))]) (idris-mode . [(0 9 19) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages"))]) (idomenu . [(0 1) nil "imenu tag selection with ido" single ((:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience"))]) (ido-yes-or-no . [(1 2) nil "Use Ido to answer yes-or-no questions" single ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no"))]) (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." single ((:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience"))]) (ido-ubiquitous . [(3 10) ((emacs (24 1)) (ido-completing-read+ (3 10)) (cl-lib (0 5)) (s (0))) "Use ido (nearly) everywhere." single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido"))]) (ido-occur . [(0 1 3) ((dash (2 11 0))) "Yet another `occur' with `ido'." single ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search"))]) (ido-load-library . [(0 2 0) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion"))]) (ido-grid-mode . [(1 1 5) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single ((:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience"))]) (ido-describe-bindings . [(0 0 8) ((dash (2 11 0))) "Yet another `describe-bindings' with `ido'." single ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help"))]) (ido-completing-read+ . [(3 10) ((emacs (24 1)) (cl-lib (0 5))) "A completing-read-function using ido" single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience"))]) (ido-complete-space-or-hyphen . [(1 1) nil "No description available." single nil]) (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience"))]) (identica-mode . [(1 3 1) nil "Major mode API client for status.net open microblogging" tar ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web"))]) (ibuffer-vc . [(0 10) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes"))]) (ibuffer-projectile . [(0 2) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes"))]) (hydra . [(0 13 3) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings"))]) (hyde . [(0 2) nil "No description available." tar nil]) (hyai . [(1 0 0) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single ((:url . "https://github.com/iquiw/hyai"))]) (httprepl . [(1 1) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl"))]) (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single ((:url . "http://github.com/rspivak/httpcode.el"))]) (html-to-markdown . [(1 5 1) nil "HTML to Markdown converter written in Emacs-lisp." single ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages"))]) (ht . [(2 0) nil "The missing hash table library for Emacs" single ((:keywords "hash table" "hash map" "hash"))]) (hookify . [(0 2 1) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience"))]) (homebrew-mode . [(1 3 2) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby"))]) (hoa-pp-mode . [(0 3 0) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa"))]) (hl-todo . [(1 4 5) nil "highlight TODO keywords" single ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience"))]) (hl-sexp . [(1 0 0) nil "highlight the current sexp" single ((:keywords "faces" "frames" "emulation"))]) (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting"))]) (hl-anything . [(0 0 9) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar nil]) (historyf . [(0 0 9) nil "file history library like browser" single ((:url . "https://github.com/k1LoW/emacs-historyf"))]) (history . [(1 0 0) ((emacs (24 3))) "History utility for source code navigation" tar ((:url . "https://github.com/boyw165/history"))]) (hippie-namespace . [(0 5 8) nil "Special treatment for namespace prefixes in hippie-expand" single ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion"))]) (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single ((:url . "https://github.com/purcell/hippie-expand-slime"))]) (hindent . [(5 4 3) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single ((:url . "https://github.com/chrisdone/hindent"))]) (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" single ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching"))]) (highlight-quoted . [(0 1) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(1 1 0) nil "highlight surrounding parentheses" single ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching"))]) (highlight-numbers . [(0 2 1) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" single ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-blocks . [(0 1 16) ((emacs (24))) "Highlight the blocks point is in" single ((:url . "https://github.com/Fanael/highlight-blocks"))]) (hi2 . [(1 0) nil "indentation module for Haskell Mode" single ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell"))]) (helm-zhihu-daily . [(0 2) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" tar ((:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-w32-launcher . [(0 1 6) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar ((:url . "https://github.com/Fanael/helm-w32-launcher"))]) (helm-unicode . [(0 0 2) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single nil]) (helm-themes . [(0 5) ((helm (1 0))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-swoop . [(1 5 1) ((helm (1 0)) (emacs (24))) "Efficiently hopping squeezed lines powered by helm interface" single ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search"))]) (helm-spaces . [(0 2) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience"))]) (helm-sage . [(0 0 4) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) "A helm extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm"))]) (helm-rubygems-org . [(0 0 1) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm"))]) (helm-robe . [(0 2) ((helm (1 7 7))) "completing read function for robe" single ((:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-recoll . [(0 3) ((helm (1 7 7))) "helm interface for the recoll desktop search tool." single ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience"))]) (helm-pydoc . [(0 7) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-pt . [(0 2) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:keywords "helm" "platinum searcher"))]) (helm-project-persist . [(1 0 0) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:keywords "project-persist" "project" "helm"))]) (helm-proc . [(0 0 4) ((helm (1 6 0))) "Helm interface for managing system processes" tar nil]) (helm-perldoc . [(0 7) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pages . [(0 1 1) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:keywords "convenience" "helm" "outlines"))]) (helm-package . [(0 3) ((helm (1 7 7)) (cl-lib (0 5))) "Listing ELPA packages with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-package"))]) (helm-orgcard . [(0 2) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org"))]) (helm-open-github . [(0 14) ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5))) "Utilities of Opening Github Page" single ((:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-nixos-options . [(0 0 1) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (helm-mt . [(0 6) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management." single ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term"))]) (helm-mode-manager . [(1 0 0) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(1 22) ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n"))]) (helm-make . [(0 1 0) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile"))]) (helm-ls-hg . [(1 7 8) ((helm (1 7 8))) "List hg files in hg project." single nil]) (helm-ls-git . [(1 8 0) ((helm (1 7 8))) "list git files." single nil]) (helm-ispell . [(0 1) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ispell"))]) (helm-hayoo . [(0 0 5) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:keywords "helm"))]) (helm-hatena-bookmark . [(2 1 0) ((helm (1 8 0))) "Hatena::Bookmark with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(1 5 2) ((emacs (24 3)) (helm (1 7 7))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-gitlab . [(0 7 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) "Helm interface to Gitlab" single ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm"))]) (helm-github-stars . [(1 3 2) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars"))]) (helm-ghq . [(1 5 1) ((helm (1 8 0))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:keywords "languages" "helm"))]) (helm-firefox . [(1 1) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-descbinds . [(1 8) ((helm (1 5))) "Yet Another `describe-bindings' with `helm'." single ((:keywords "helm" "help"))]) (helm-dash . [(1 2 0) ((helm (0 0 0)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:url . "http://github.com/areina/helm-dash") (:keywords "docs"))]) (helm-cscope . [(0 1 1) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm"))]) (helm-core . [(1 9 1) ((emacs (24)) (cl-lib (0 5)) (async (1 6))) "Development files for Helm" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (helm-commandlinefu . [(0 3) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com"))]) (helm-circe . [(0 3) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe"))]) (helm-c-yasnippet . [(0 6 7) ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:keywords "convenience" "emulation"))]) (helm-bundle-show . [(1 1 5) ((helm (1 8 0))) "bundle show with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-backup . [(0 2 1) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single ((:url . "http://github.com/antham/helm-backup") (:keywords "backup" "convenience" "files" "tools" "vc"))]) (helm-aws . [(1 0 0) ((helm (1 5 3))) "Manage AWS EC2 server instances directly from Emacs" single ((:url . "https://github.com/istib/helm-aws"))]) (helm-ag . [(0 50) ((helm (1 7 7)) (cl-lib (0 5))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm . [(1 9 1) ((emacs (24)) (cl-lib (0 5)) (async (1 6)) (helm-core (1 9 1))) "Helm is an Emacs incremental and narrowing framework" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (hcl-mode . [(0 1) ((cl-lib (0 5))) "Major mode for Hashicorp" single ((:url . "https://github.com/syohex/emacs-hcl-mode"))]) (haxor-mode . [(0 2 0) ((emacs (24 0))) "Major mode for exiting .hax files" single ((:url . "https://github.com/krzysztof-magosa/haxor-mode") (:keywords "haxor"))]) (haskell-tab-indent . [(0 1 0) nil "tab-based indentation for haskell-mode" single ((:url . "https://spwhitton.name/tech/code/haskell-tab-indent/") (:keywords "indentation" "haskell"))]) (haskell-snippets . [(0 1 0) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell"))]) (haskell-mode . [(13 16) ((cl-lib (0 5))) "A Haskell editing mode" tar nil]) (haskell-emacs-text . [(3 1 2) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs-base . [(3 1 2) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs . [(3 1 2) nil "Write emacs extensions in haskell" tar ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi"))]) (hardhat . [(0 4 4) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience"))]) (hardcore-mode . [(0 1 0) nil "Disable arrow keys + optionally backspace and return" single nil]) (haml-mode . [(3 1 9) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html"))]) (ham-mode . [(1 1 2) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp"))]) (hackernews . [(0 2) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil]) (guru-mode . [(0 2) nil "Become an Emacs guru" single ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience"))]) (guide-key-tip . [(0 0 1) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip"))]) (guide-key . [(1 2 5) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience"))]) (gscholar-bibtex . [(0 3 1) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:keywords "extensions"))]) (grunt . [(1 3 2) ((dash (2 9 0)) (ansi-color (3 4 2))) "Some glue to stick Emacs and Gruntfiles together" single ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt"))]) (gruber-darker-theme . [(0 6) nil "Gruber Darker color theme for Emacs 24." single ((:url . "http://github.com/rexim/gruber-darker-theme"))]) (grizzl . [(0 1 1) nil "Fuzzy Search Library & Completing Read" tar nil]) (grin . [(1 0) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (grass-mode . [(0 1) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single ((:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(0 4) nil "Mode for the dot-language used by graphviz (att)." single ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att"))]) (graphene-meta-theme . [(0 0 2) nil "Integrated theming for common packages" single ((:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults"))]) (graphene . [(0 9 5) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar nil]) (grandshell-theme . [(1 0) nil "Dark color theme for Emacs > 24 with intensive colors." tar nil]) (grails-projectile-mode . [(1 1 1) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile"))]) (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle"))]) (goto-last-change . [(1 2 1) nil "Move point through buffer-undo-list positions" single ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience"))]) (goto-gem . [(1 2) ((s (1 9 0))) "Open dired in gem directory" single ((:keywords "gemfile" "convenience"))]) (gotham-theme . [(1 1 5) nil "A very dark Emacs color theme." single ((:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(0 9 0) ((emacs (24 3)) (s (1 10 0)) (f (0 18 0)) (go-mode (1 3 1))) "Launch GO unit tests" single ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests"))]) (google-translate . [(0 11 5) nil "Emacs interface to Google Translate." tar nil]) (google-this . [(1 10) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia"))]) (golden-ratio . [(1 0) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:keywords "window" "resizing"))]) (go-scratch . [(0 0 1) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:keywords "languages" "go"))]) (go-mode . [(1 3 1) nil "Major mode for the Go programming language" tar ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go"))]) (go-errcheck . [(1 1 2) nil "errcheck integration for go-mode" single nil]) (go-eldoc . [(0 26) ((go-mode (1 0 0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-direx . [(0 4) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:url . "https://github.com/syohex/emacs-go-direx"))]) (go-autocomplete . [(20150303) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:keywords "languages"))]) (gnus-x-gm-raw . [(0 0 1) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus"))]) (gnus-desktop-notify . [(1 4) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/"))]) (gnuplot . [(0 7 0) nil "drive gnuplot from within emacs" tar ((:keywords "gnuplot" "plotting"))]) (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" single nil]) (gnome-calendar . [(0 2) nil "Integration with the GNOME Shell calendar" single ((:keywords "gnome" "calendar"))]) (gmpl-mode . [(0 1 0) nil "Major mode for editing GMPL(MathProg) files" single ((:keywords "extensions"))]) (gmail2bbdb . [(0 0 4) nil "import email and name into bbdb from vcard." single ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail"))]) (gmail-message-mode . [(1 3 2) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation"))]) (gitlab . [(0 7 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab"))]) (gitignore-mode . [(1 2 0) nil "Major mode for editing .gitignore files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (github-clone . [(0 2) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools"))]) (github-browse-file . [(0 5 0) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github"))]) (gitconfig-mode . [(1 2 0) nil "Major mode for editing .gitconfig files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (gitconfig . [(1 0 0) nil "Emacs lisp interface to work with git-config variables" single ((:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(1 2 0) nil "Major mode for editing .gitattributes files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-wip-timemachine . [(1 0) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git"))]) (git-timemachine . [(2 8) nil "Walk through git revisions of a file" single ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git"))]) (git-ps1-mode . [(0 2 2) nil "Global minor-mode to print __git_ps1" single ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git"))]) (git-messenger . [(0 16) ((popup (0 5 0)) (cl-lib (0 5))) "Pop up last commit information of current line" single ((:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(0 3 0) nil "Get the GitHub/Bitbucket/Gitorious URL for a buffer location" single ((:url . "http://github.com/sshaw/git-link") (:keywords "git"))]) (git-lens . [(0 4) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:keywords "vc" "convenience"))]) (git-gutter-fringe . [(0 22) ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(0 85) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(0 4) ((git-commit (0))) "Manage Git hunks straight from the buffer" single ((:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc"))]) (git-commit . [(2 4 1) ((emacs (24 4)) (dash (2 12 1)) (with-editor (2 4 1))) "Edit Git commit messages" single ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (git-command . [(0 2 0) ((term-run (0 1 4)) (with-editor (2 3 1)) (git-ps1-mode (0 2 0))) "Yet another Git interface" single ((:url . "https://github.com/10sr/git-command-el") (:keywords "utility" "git"))]) (git-auto-commit-mode . [(4 4 0) nil "Emacs Minor mode to automatically commit and push" single ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc"))]) (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:url . "http://github.com/rejeep/git.el") (:keywords "git"))]) (gist . [(1 3 1) ((emacs (24 1)) (gh (0 9 2))) "Emacs integration for gist.github.com" single ((:url . "https://github.com/defunkt/gist.el") (:keywords "tools"))]) (ghc-imported-from . [(0 1 2) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:keywords "languages"))]) (ghc . [(5 5 0 0) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar nil]) (ggtags . [(0 8 11) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience"))]) (ggo-mode . [(20130521) nil "Gengetopt major mode" single ((:keywords "extensions" "convenience" "local"))]) (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" single ((:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(0 1 0) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml"))]) (geiser . [(0 8 1) nil "GNU Emacs and Scheme talk to each other" tar nil]) (gather . [(1 1 0) nil "Gather string in buffer." single ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools"))]) (fzf . [(0 1) ((emacs (24 4))) "A front-end for fzf." single ((:url . "https://github.com/bling/fzf.el") (:keywords "fzf" "fuzzy" "search"))]) (fxrd-mode . [(0 3) ((s (1 2))) "Major mode for editing fixed field width files" tar ((:url . "https://github.com/msherry/fxrd-mode") (:keywords "convenience"))]) (fwb-cmds . [(0 4 0) nil "misc frame, window and buffer commands" single ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience"))]) (fvwm-mode . [(1 6 4) nil "major mode for editing Fvwm configuration files" single ((:keywords "files"))]) (fuzzy . [(0 1) nil "Fuzzy Matching" single ((:keywords "convenience"))]) (function-args . [(0 5 1) ((swiper (0 2 0))) "C++ completion for GNU Emacs" tar ((:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(0 3 0) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:keywords "fullscreen"))]) (full-ack . [(1 0) nil "a front-end for ack" single ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching"))]) (fuel . [(0 96) nil "No description available." tar nil]) (fsharp-mode . [(1 7 2) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil]) (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" single ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp"))]) (frame-restore . [(0 5) ((emacs (24 1))) "Restore Emacs frame" single ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience"))]) (fountain-mode . [(1 5 0) ((s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp"))]) (format-sql . [(0 4) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:url . "https://github.com/paetzke/format-sql.el"))]) (form-feed . [(0 2 2) nil "Display ^L glyphs as horizontal lines" single ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces"))]) (foreman-mode . [(0 0 1) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman"))]) (forecast . [(0 1 9) ((emacs (24 4))) "Display a forecast.io weather report in a buffer" single ((:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontawesome . [(0 3) ((helm-core (1 7 7)) (cl-lib (0 5))) "fontawesome utility" tar ((:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-utils . [(0 7 8) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions"))]) (fold-this . [(0 3 0) nil "Just fold this region please" single ((:keywords "convenience"))]) (fold-dwim-org . [(0 6) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode"))]) (fold-dwim . [(1 2) nil "No description available." single nil]) (focus . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:url . "http://github.com/larstvei/Focus"))]) (fm . [(1 0) nil "follow mode for compilation/output buffers" single ((:keywords "outlines"))]) (flyspell-popup . [(0 2) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience"))]) (flyspell-lazy . [(0 6 10) nil "Improve flyspell responsiveness using idle timers" single ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling"))]) (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single ((:url . "https://github.com/purcell/flymake-sass"))]) (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-less . [(0 3) ((less-css-mode (0 15))) "Flymake handler for LESS stylesheets (lesscss.org)" single ((:keywords "languages"))]) (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single ((:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar nil]) (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:url . "https://github.com/purcell/flymake-haml"))]) (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single ((:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" single ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal"))]) (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:url . "https://github.com/purcell/flymake-css"))]) (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-ycmd . [(0 9) ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (20141217 453))) "flycheck integration for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-tip . [(0 5 0) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck"))]) (flycheck-status-emoji . [(1 1) ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools"))]) (flycheck-pos-tip . [(0 1) ((dash (2 12)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single ((:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience"))]) (flycheck-package . [(0 8) ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) "A Flycheck checker for elisp package authors" single ((:keywords "lisp"))]) (flycheck-ocaml . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages"))]) (flycheck-ledger . [(0 4) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:keywords "convenience" "languages" "tools"))]) (flycheck-hdevtools . [(0 3) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools"))]) (flycheck-haskell . [(0 7 2) ((emacs (24 1)) (flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) "Flycheck: Cabal projects and sandboxes" tar ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience"))]) (flycheck-gometalinter . [(0 1 1) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single ((:url . "https://github.com/favadi/flycheck-gometalinter") (:keywords "convenience" "tools" "go"))]) (flycheck-dmd-dub . [(0 9) ((flycheck (0 24))) "Sets flycheck-dmd-include-paths from dub package information" single ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages"))]) (flycheck-color-mode-line . [(0 3) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(0 1 3) ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-checkbashisms . [(1 3) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single ((:url . "https://github.com/Gnouc/flycheck-checkbashisms") (:keywords "convenience" "tools" "sh" "unix"))]) (flycheck-cask . [(0 3) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience"))]) (flycheck . [(0 25 1) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (cl-lib (0 5)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools"))]) (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:url . "https://github.com/lewang/flx"))]) (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:url . "https://github.com/lewang/flx"))]) (floobits . [(1 6 3) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools"))]) (fixmee . [(0 8 6) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience"))]) (fix-word . [(0 1 1) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience"))]) (fish-mode . [(0 1 1) ((emacs (24))) "Major mode for fish shell scripts" single ((:keywords "fish" "shell"))]) (firestarter . [(0 2 4) nil "Execute (shell) commands on save" single ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience"))]) (fireplace . [(1 1 1) nil "A cozy fireplace for emacs" single ((:url . "https://github.com/johanvts/emacs-fireplace") (:keywords "games"))]) (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar nil]) (find-file-in-repository . [(1 2) nil "Quickly find files in a git, mercurial or other repository" single ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control"))]) (find-file-in-project . [(4 5) ((swiper (0 7 0)) (emacs (24 3))) "Find files in a project quickly, on any OS" single ((:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience"))]) (find-by-pinyin-dired . [(0 0 2) nil "Find file by first Pinyin characters of Chinese Hanzi" tar nil]) (finalize . [(1 0 0) ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar nil]) (fill-column-indicator . [(1 81) nil "Graphically indicate the fill column" tar ((:keywords "convenience"))]) (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil]) (fcitx . [(0 2 1) nil "Make fcitx better in Emacs" single ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions"))]) (fastnav . [(1 0 7) nil "Fast navigation and editing routines." single ((:keywords "nav" "fast" "fastnav" "navigation"))]) (fancy-narrow . [(0 9 4) nil "narrow-to-region with more eye candy." single ((:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience"))]) (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" single ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware"))]) (factlog . [(0 0 1) nil "File activity logger" single nil]) (fabric . [(0 2 0) nil "Launch Fabric using Emacs" tar ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric"))]) (f . [(0 17 3) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories"))]) (eyebrowse . [(0 6 9) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience"))]) (extend-dnd . [(0 5) nil "R drag and Drop" tar ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop"))]) (express . [(0 6 0) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface"))]) (expand-region . [(0 10 0) nil "Increase selected region by semantic units." tar nil]) (exec-path-from-shell . [(1 10) nil "Get environment variables such as $PATH from the shell" single ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment"))]) (eww-lnum . [(1 1) nil "Conkeror-like functionality for eww" single ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror"))]) (evm . [(0 4 2) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(0 2 0) ((evil (0))) "Starts a * or # search from the visual selection" single ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar"))]) (evil-visual-mark-mode . [(0 0 3) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:keywords "evil"))]) (evil-tutor . [(1 0) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil"))]) (evil-textobj-anyblock . [(0 1) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil"))]) (evil-space . [(0 0 6) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion"))]) (evil-snipe . [(1 0) nil "emulate vim-sneak & vim-seek" single ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek"))]) (evil-smartparens . [(0 3 0) ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) "Evil support for smartparens" single ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens"))]) (evil-search-highlight-persist . [(1 8) ((highlight (0))) "Persistent highlights after search" single nil]) (evil-rsi . [(1 1 1) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi"))]) (evil-quickscope . [(0 1 3) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil"))]) (evil-org . [(0 1 1) ((evil (0)) (org (0))) "evil keybindings for org-mode" single ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets"))]) (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" single ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary"))]) (evil-nerd-commenter . [(2 3) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil]) (evil-matchit . [(2 1 2) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil]) (evil-mark-replace . [(0 0 4) ((evil (1 0 8))) "replace the thing in marked area" single ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil"))]) (evil-lisp-state . [(7 1) ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic"))]) (evil-leader . [(0 4 3) ((evil (0))) "let there be <leader>" single ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader"))]) (evil-jumper . [(0 3 0) ((evil (0)) (cl-lib (0 5))) "Jump like vimmers do!" single ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list"))]) (evil-iedit-state . [(1 0) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic"))]) (evil-escape . [(3 12) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil"))]) (evil-commentary . [(1 2 1) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." single ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary"))]) (evil-args . [(1 0) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation"))]) (evil-anzu . [(0 3) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil . [(1 2 10) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar nil]) (eval-sexp-fu . [(0 4 0) nil "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(0 9 0) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (esxml . [(0 3 1) ((kv (0 0 5))) "Library for working with xml via esxml and sxml" single ((:keywords "tools" "lisp" "comm"))]) (esup . [(0 4) nil "the Emacs StartUp Profiler (ESUP)" single ((:url . "http://github.com/jschaf/esup") (:keywords "emacs-lisp" "elisp" "profile" "startup"))]) (ess-smart-underscore . [(0 79) nil "Ess Smart Underscore" tar ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore"))]) (ess-R-object-popup . [(1 0) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess"))]) (ess-R-data-view . [(1 0) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience"))]) (ess . [(15 9) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar ((:url . "http://ess.r-project.org"))]) (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:url . "http://github.com/ecukes/espuds") (:keywords "test"))]) (eshell-z . [(0 2 1) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience"))]) (eshell-autojump . [(0 2) nil "autojump command for Eshell" single ((:url . "http://github.com/coldnew/eshell-autojump"))]) (es-windows . [(0 3) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(4 0 0) nil "A major mode for editing Elasticsearch queries" tar ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch"))]) (es-lib . [(0 4) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(0 7 0) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test"))]) (ert-junit . [(0 1 1) ((ert (0))) "JUnit XML reports from ert results" single ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert"))]) (ert-async . [(0 1 2) nil "Async support for ERT" single ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test"))]) (erlang . [(18 2 2) nil "Erlang major mode" tar nil]) (ergoemacs-mode . [(5 14 7 3 1) ((emacs (24 1)) (undo-tree (0 6 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience"))]) (erefactor . [(0 7 0) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint"))]) (ercn . [(1 1 1) nil "Flexible ERC notifications" single ((:url . "http://www.github.com/leathekd/ercn"))]) (erc-youtube . [(0 -3) ((erc (5 3))) "Show received youtube urls in the ERC buffer" single ((:keywords "multimedia"))]) (erc-hl-nicks . [(1 3 0) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-crypt . [(1 0) nil "Symmetric Encryption for ERC" single ((:keywords "application"))]) (epl . [(0 8) ((cl-lib (0 3))) "Emacs Package Library" single ((:url . "http://github.com/cask/epl") (:keywords "convenience"))]) (epc . [(0 1 0) ((concurrent (0 3 1)) (ctable (0 1 0))) "A RPC stack for the Emacs Lisp" tar ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc"))]) (enotify . [(0 1 3) nil "No description available." tar nil]) (enlive . [(0 0 1) nil "query html document with css selectors" single ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query"))]) (engine-mode . [(1 0 0) nil "Define and query search engines from within Emacs." single ((:url . "https://github.com/hrs/engine-mode/engine-mode.el"))]) (emr . [(0 3 6) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar ((:keywords "tools" "convenience" "refactoring"))]) (emojify . [(0 3) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar ((:url . "https://github.com/iqbalansari/emacs-emojify") (:keywords "multimedia" "convenience"))]) (emoji-fontset . [(0 1 0) nil "Set font face for Emoji." single ((:keywords "emoji" "font" "config"))]) (emoji-cheat-sheet-plus . [(1 2 1) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji"))]) (emms-player-simple-mpv . [(0 3 0) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv"))]) (emms-player-mpv . [(0 0 7) ((emms (0))) "mpv support for EMMS" single ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv"))]) (emms-mode-line-cycle . [(0 2 4) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line"))]) (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" single ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience"))]) (emamux . [(0 13) ((emacs (24)) (cl-lib (0 5))) "Interact with tmux" single ((:url . "https://github.com/syohex/emacs-emamux"))]) (emacsql-sqlite . [(2 0 0) nil "No description available." tar nil]) (emacsql-psql . [(2 0 0) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "back-end for PostgreSQL via psql" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(2 0 0) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "back-end for MySQL" single ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(2 0 0) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsc . [(1 2 20131027) nil "helper for emacsc(1)" tar ((:url . "https://github.com/knu/emacsc") (:keywords "tools"))]) (emacsagist . [(1 0 0) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools"))]) (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar nil]) (emacs-eclim . [(0 3) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) "An interface to the Eclipse IDE." tar nil]) (elx . [(0 10 0) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages"))]) (elwm . [(0 0 2) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs"))]) (elscreen-persist . [(0 2 0) ((elscreen (1 4 6)) (revive (2 19))) "persist the elscreen across sessions" single ((:keywords "elscreen" "frames"))]) (elscreen-mew . [(1 0 1) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew"))]) (elpy . [(1 10 0) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil]) (elpa-mirror . [(1 2 1) nil "ELPA mirror from locally installed packages is easy" tar nil]) (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint"))]) (elmine . [(0 3) nil "No description available." single nil]) (elmacro . [(0 3 0) ((s (1 9 0)) (dash (1 5 0)) (cl-lib (0 5))) "Convert keyboard macros to elisp" single ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience"))]) (elm-mode . [(0 9 1) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar ((:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar nil]) (elixir-mode . [(2 2 8) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir"))]) (elisp-slime-nav . [(0 8) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp"))]) (elfeed-web . [(1 4 0) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil]) (elfeed . [(1 4 0) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar nil]) (electric-operator . [(0 1) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric"))]) (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." single nil]) (elang . [(0 0 1) ((names (20151201 404))) "A Python-like language for the Emacs VM" tar nil]) (el-x . [(0 3 1) nil "main entry point for el-x package" tar ((:keywords "lisp"))]) (el-spice . [(0 2 2) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:url . "https://github.com/vedang/el-spice") (:keywords "configuration"))]) (el-mock . [(1 25 1) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest"))]) (el-init-viewer . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single nil]) (el-init . [(0 2 0) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:url . "https://github.com/HKey/el-init"))]) (el-get . [(5 1) nil "Manage the external elisp bits and pieces you depend upon" tar ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki"))]) (el-autoyas . [(0 5) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet"))]) (ein . [(0 7 1) ((websocket (1 5)) (request (0 2))) "Emacs IPython Notebook" tar nil]) (eide . [(2 1 1) nil "IDE interface" tar nil]) (egison-mode . [(3 5 10) nil "Egison editing mode" single ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(1 0 9) nil "Emacs Got Git - Emacs interface to Git" tar ((:keywords "git" "version control" "release management"))]) (edts . [(0 1 0) nil "No description available." tar nil]) (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" single ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure"))]) (editorconfig-fnmatch . [(0 7 0) ((cl-lib (0 5))) "Glob pattern matching in Emacs lisp" single ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (editorconfig-core . [(0 7 0) ((editorconfig-fnmatch (0 6 2)) (cl-lib (0 5))) "EditorConfig Core library in Emacs Lisp" tar ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (editorconfig . [(0 7 0) ((editorconfig-core (0 6 2))) "EditorConfig Emacs Plugin" single ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server . [(1 13) nil "server that responds to edit requests from Chrome" single ((:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(0 3) nil "edit a single list" single ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-indirect . [(0 1 2) ((emacs (24 3))) "Edit regions in separate buffers" single ((:url . "https://github.com/Fanael/edit-indirect"))]) (edbi . [(0 1 2) ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) "Emacs Database Interface" tar nil]) (ecukes . [(0 6 15) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil]) (ecb . [(2 24) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(2 5 2) ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) "a BibTeX database manager" tar ((:keywords "text" "bibtex"))]) (ebal . [(0 1 2) ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) "Emacs interface to Cabal" single ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell"))]) (easy-repeat . [(0 2) ((emacs (24 4))) "Repeat easily" single ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience"))]) (easy-kill-extras . [(0 9 4) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience"))]) (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience"))]) (e2wm-term . [(0 0 5) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager"))]) (e2wm-sww . [(0 0 2) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager"))]) (e2wm-pkgex4pl . [(0 0 1) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl"))]) (e2wm-direx . [(0 0 5) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience"))]) (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single ((:keywords "window manager" "convenience" "e2wm"))]) (e2wm . [(1 3) nil "simple window manager for emacs" tar ((:keywords "tools" "window manager"))]) (dynamic-ruler . [(0 1 4) nil "Displays a dynamic ruler at point." single ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience"))]) (dynamic-fonts . [(0 6 4) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames"))]) (dyalog-mode . [(0 3) nil "Major mode for editing Dyalog APL source code" single ((:url . "http://bitbucket.org/harsman/dyalog-mode") (:keywords "languages"))]) (ducpel . [(0 1) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:url . "https://github.com/alezost/ducpel") (:keywords "games"))]) (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp"))]) (drupal-mode . [(0 6 1) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal"))]) (drag-stuff . [(0 1 0) nil "Drag stuff (lines, words, region, etc...) around" tar nil]) (draft-mode . [(0 1 1) nil "Rough drafting for Emacs." single ((:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting"))]) (dracula-theme . [(1 2 0) ((emacs (24))) "Dracula Theme" single ((:url . "https://github.com/zenorocha/dracula-theme"))]) (downplay-mode . [(0 1) nil "focus attention on a region of the buffer" single ((:url . "https://github.com/tobias/downplay-mode/"))]) (dockerfile-mode . [(1 2) nil "Major mode for editing Docker's Dockerfiles" single nil]) (docker . [(0 2 0) ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) "Emacs interface to Docker" tar nil]) (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes"))]) (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys"))]) (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single nil]) (direx-grep . [(0 1 0) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience"))]) (direx . [(1 0 0) nil "Simple Directory Explorer" tar ((:keywords "convenience"))]) (dired-single . [(0 1 3) nil "Reuse the current dired buffer to visit a directory" single ((:keywords "dired" "reuse" "buffer"))]) (dired-k . [(0 16) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" single ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu"))]) (dired-fdclone . [(1 5 2) nil "dired functions and settings to mimic FDclone" single ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired"))]) (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single ((:keywords "dired" "environment" "files" "renaming"))]) (dionysos . [(0 3 0) ((libmpdee (2 1 0)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0))) "Dionysos, a music player for Emacs" tar ((:url . "https://github.com/nlamirault/dionysos") (:keywords "music"))]) (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" single ((:url . "https://github.com/myrjola/diminish.el") (:keywords "extensions" "diminish" "minor" "codeprose"))]) (dim-autoload . [(1 1 4) nil "dim complete autoload cookie lines" single ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience"))]) (dim . [(0 1) ((emacs (24 4))) "Change mode-line names of major/minor modes" single ((:url . "https://github.com/alezost/dim.el") (:keywords "convenience"))]) (digistar-mode . [(0 4) nil "major mode for Digistar scripts" single ((:keywords "languages"))]) (diffview . [(1 0) nil "View diffs in side-by-side format" single ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff"))]) (diff-hl . [(1 8 2) ((cl-lib (0 2))) "Highlight uncommitted changes using VC" tar ((:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff"))]) (dictionary . [(1 10) nil "No description available." single nil]) (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience"))]) (desktop+ . [(0 1) nil "improved sessions" single nil]) (describe-number . [(0 3 1) ((yabin (1 1))) "Describe arbitrarily large number at point." single ((:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help"))]) (demangle-mode . [(1 1) ((emacs (24)) (cl-lib (0 1))) "Automatically demangle C++ symbols" single ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools"))]) (deft . [(0 7) nil "quickly browse, filter, and edit plain text notes" single ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity"))]) (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." single ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience"))]) (deferred . [(0 4 0) nil "Simple asynchronous functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async"))]) (default-text-scale . [(0 1) nil "Easily adjust the font size in all frames" single ((:keywords "frames" "faces"))]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single ((:keywords "dedicated" "buffer"))]) (date-field . [(0 0 1) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets"))]) (date-at-point . [(0 1) nil "Add `date' to `thing-at-point' function" single ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience"))]) (dash-functional . [(2 12 1) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators"))]) (dash . [(2 12 1) nil "A modern list library for Emacs" single ((:keywords "lists"))]) (dart-mode . [(0 14) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) "Major mode for editing Dart files" single ((:url . "http://code.google.com/p/dart-mode") (:keywords "language"))]) (darktooth-theme . [(0 1 37) nil "Color theme for Emacs, when soothe and gruvbox collide" single ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth"))]) (darcula-theme . [(1 0) nil "Inspired by IntelliJ's Darcula theme" single ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces"))]) (darcsum . [(1 3) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (d-mode . [(2 0 6) nil "D Programming Language mode for (X)Emacs" single ((:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (cython-mode . [(0 23 4) nil "Major mode for editing Cython files" single nil]) (cyphejor . [(0 1 0) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode"))]) (cyberpunk-theme . [(1 16) nil "Cyberpunk Color Theme" single ((:keywords "color" "theme" "cyberpunk"))]) (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" single ((:keywords "c" "languages"))]) (ctxmenu . [(0 3 0) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup"))]) (ctags-update . [(0 2 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags"))]) (ctags . [(1 1 1) nil "No description available." single nil]) (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table"))]) (csharp-mode . [(0 8 12) nil "C# mode derived mode" single ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode"))]) (cryptol-mode . [(0 1 0) nil "Cryptol major mode for Emacs" single ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography"))]) (crux . [(0 1 0) nil "No description available." single nil]) (crm-custom . [(0 5) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single ((:url . "https://github.com/DarwinAwardWinner/crm-custom") (:keywords "completion" "minibuffer" "multiple elements"))]) (creds . [(0 0 6 1) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar nil]) (cpputils-cmake . [(0 5 2) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil]) (counsel . [(0 7 0) ((emacs (24 1)) (swiper (0 4 0))) "Various completion functions using Ivy" single ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching"))]) (corral . [(0 2) nil "Incrementally wrap delimiters around s-expressions" single ((:url . "http://github.com/nivekuil/corral"))]) (connection . [(1 10) nil "No description available." single nil]) (conkeror-minor-mode . [(1 6 2) nil "Mode for editing conkeror javascript files." single ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools"))]) (concurrent . [(0 4 0) ((deferred (0 4 0))) "Concurrent utility functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent"))]) (company-ycmd . [(0 9) ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 0 0))) "company-mode backend for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (company-web . [(0 9) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:url . "https://github.com/osv/company-web") (:keywords "html" "company"))]) (company-tern . [(0 2 0) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:url . "https://github.com/proofit404/company-tern"))]) (company-sourcekit . [(0 1 4) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 1 4))) "company-mode completion backend for SourceKit" single ((:url . "https://github.com/nathankot/company-sourcekit") (:keywords "abbrev"))]) (company-restclient . [(0 1 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single ((:url . "https://github.com/iquiw/company-restclient"))]) (company-quickhelp . [(1 2 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp"))]) (company-nixos-options . [(0 0 1) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (company-math . [(1 0 1) ((company (0 8 0)) (math-symbol-lists (1 0))) "Completion back-ends for for math unicode symbols and latex tags" single ((:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion"))]) (company-jedi . [(0 4) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single nil]) (company-irony . [(0 1 0) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience"))]) (company-go . [(20150303) ((company (0 8 0))) "company-mode backend for Go (using gocode)" single ((:keywords "languages"))]) (company-ghc . [(1 1 0) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion"))]) (company-emoji . [(2 3 0) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" single ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk"))]) (company-cabal . [(0 1 1) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:url . "https://github.com/iquiw/company-cabal"))]) (company-ansible . [(0 1 1) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible"))]) (company-anaconda . [(0 1 0) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(0 8 12) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching"))]) (common-lisp-snippets . [(0 1 1) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets"))]) (comment-dwim-2 . [(1 2 2) nil "An all-in-one comment command to rule them all" single ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience"))]) (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv"))]) (colorsarenice-theme . [(1 0 20) ((emacs (24))) "A colorful color theme." tar nil]) (color-theme-sanityinc-tomorrow . [(1 16) nil "A version of Chris Kempson's various Tomorrow themes" tar nil]) (color-theme-sanityinc-solarized . [(2 29) nil "A version of Ethan Schoonover's Solarized themes" tar nil]) (color-theme-modern . [(0 0 1) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar ((:url . "https://github.com/emacs-jp/replace-colorthemes/"))]) (coffee-mode . [(0 6 2) ((emacs (24 1)) (cl-lib (0 5))) "Major mode to edit CoffeeScript files in Emacs" single ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode"))]) (codic . [(0 3) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:url . "https://github.com/syohex/emacs-codic"))]) (cmake-project . [(0 7) nil "Integrates CMake build process with Emacs" single ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools"))]) (cmake-mode . [(3 4 2) nil "No description available." single nil]) (cmake-ide . [(0 3) ((emacs (24 1))) "Calls CMake to find out include paths and other compiler flags" single ((:url . "http://github.com/atilaneves/cmake-ide") (:keywords "languages"))]) (cm-mode . [(1 1) nil "Minor mode for CriticMarkup" single ((:keywords "text" "markdown"))]) (clojure-snippets . [(1 0 0) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil]) (clojure-quick-repls . [(0 1 0) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript"))]) (clojure-mode-extra-font-locking . [(5 1 0) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp"))]) (clojure-mode . [(5 1 0) ((emacs (24 3))) "Major mode for Clojure code" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp"))]) (clojure-cheatsheet . [(0 4 0) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm"))]) (clocker . [(0 0 10) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:keywords "org"))]) (cljr-helm . [(0 7) ((clj-refactor (0 13 0)) (helm (1 5 6))) "Wraps clojure refactor commands with helm" single ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor"))]) (clj-refactor . [(1 1 0) ((emacs (24 3)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 9 1)) (edn (1 1 1))) "A collection of clojure refactoring functions" tar ((:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(0 7) nil "Major mode for editing CLIPS code and REPL" tar nil]) (cliphist . [(0 1 1) ((popup (0 5 0))) "Read clipboard history from Parcellite on Linux and Flycut on OS X" tar ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history"))]) (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:url . "https://github.com/skeeto/cl-lib-highlight"))]) (circe . [(2 1) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:url . "https://github.com/jorgenschaefer/circe"))]) (cil-mode . [(0 3) nil "Common Intermediate Language mode" single ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages"))]) (cider-eval-sexp-fu . [(1 0) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single ((:keywords "languages" "clojure" "cider"))]) (cider . [(0 10 1) ((emacs (24 3)) (clojure-mode (5 1 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 4)) (seq (1 9))) "Clojure Interactive Development Environment that Rocks" tar ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider"))]) (chinese-word-at-point . [(0 2 3) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese"))]) (checkbox . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience"))]) (charmap . [(0 0 1) nil "Unicode table for Emacs" single ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs"))]) (cfengine-code-style . [(3 8 0 2 1) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core"))]) (cerbere . [(0 1 0) ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd"))]) (celery . [(0 0 3) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience"))]) (cdlatex . [(4 7) nil "Fast input methods for LaTeX environments and math" single ((:keywords "tex"))]) (caskxy . [(0 0 5) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience"))]) (cask-package-toolset . [(0 9 1) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools"))]) (cask . [(0 7 4) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience"))]) (caseformat . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single ((:url . "https://github.com/HKey/caseformat") (:keywords "convenience"))]) (cargo . [(0 1 1) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:keywords "tools"))]) (camcorder . [(0 2) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast"))]) (calfw . [(1 5) ((google-maps (20130412 230))) "Calendar view framework on Emacs" tar ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar"))]) (cake2 . [(2 1 0) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:url . "http://code.101000lab.org"))]) (cake-inflector . [(1 1 1) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(1 4 3) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil]) (button-lock . [(1 0 2) nil "Clickable text defined by regular expression" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions"))]) (buttercup . [(1 4) nil "Behavior-Driven Emacs Lisp Testing" tar nil]) (butler . [(0 2 4) ((deferred (3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar nil]) (bury-successful-compilation . [(0 1) nil "Bury the *compilation* buffer after successful compilation" single ((:keywords "compilation"))]) (bundler . [(1 1 0) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single ((:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby"))]) (bug-reference-github . [(0 2 0) nil "Automatically set `bug-reference-url-format' in Github repositories." single ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools"))]) (bufshow . [(0 1 0) nil "No description available." single nil]) (buffer-utils . [(0 1 0) nil "Buffer-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions"))]) (buffer-move . [(0 6 2) nil "" single ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience"))]) (buffer-flip . [(1 1) ((key-chord (20150808))) "Use key-chord to cycle through buffers like Alt-Tab in Windows" single ((:url . "https://github.com/killdash9/buffer-flip.el") (:keywords "convenience"))]) (browse-url-dwim . [(0 6 8) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia"))]) (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience"))]) (boxquote . [(1 22) nil "Quote text with a semi-box." single nil]) (boon . [(0 3) ((emacs (24 5)) (expand-region (0 10 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar nil]) (bongo . [(1 0) nil "play music with Emacs" tar nil]) (bog . [(1 1 0) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines"))]) (birds-of-paradise-plus-theme . [(0 1 1) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes"))]) (bing-dict . [(0 2 2) nil "Minimalists' English-Chinese Bing dictionary" single ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions"))]) (bind-key . [(2 1) nil "A simple way to manage personal keybindings" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs"))]) (better-defaults . [(0 1 2) nil "Fixing weird quirks and poor defaults" single ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience"))]) (beginend . [(1 0 0) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer"))]) (beeminder . [(1 0 0) nil "Emacs interface for Beeminder" single ((:keywords "beeminder"))]) (bbdb2erc . [(0 1 3) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar ((:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news"))]) (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail"))]) (bbcode-mode . [(2 0 0) nil "Major mode for writing BBCode markup" single ((:url . "https://github.com/ejmr/bbcode-mode"))]) (bash-completion . [(2 0 0) nil "BASH completion for the shell buffer" tar nil]) (badwolf-theme . [(1 2) ((emacs (24))) "Bad Wolf color theme" single ((:url . "https://github.com/bkruczyk/badwolf-emacs") (:keywords "themes"))]) (back-button . [(0 6 6) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface"))]) (babel . [(1 4) nil "interface to web translation services such as Babelfish" single ((:keywords "translation" "web"))]) (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" single ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions"))]) (avy-migemo . [(0 2 11) ((emacs (24 4)) (avy (0 3)) (migemo (1 9))) "avy with migemo" tar ((:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo"))]) (avy . [(0 3 0) ((emacs (24 1)) (cl-lib (0 5))) "set-based completion" single ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location"))]) (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations"))]) (autodisass-llvm-bitcode . [(1 1) nil "Automatically disassemble LLVM bitcode" tar nil]) (autodisass-java-bytecode . [(1 3) nil "Automatically disassemble Java bytecode" tar nil]) (auto-yasnippet . [(0 3 0) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-shell-command . [(1 0 2) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-package-update . [(1 6 1) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update"))]) (auto-indent-mode . [(0 126) nil "Auto indent Minor mode" tar ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation"))]) (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" single ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp"))]) (auto-complete-sage . [(0 0 5) ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) "An auto-complete source for sage-shell-mode." single ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete"))]) (auto-complete-pcmp . [(0 0 2) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion"))]) (auto-complete-nxml . [(0 5 0) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml"))]) (auto-complete-exuberant-ctags . [(0 0 7) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags"))]) (auto-complete-clang-async . [(0 5) nil "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience"))]) (auto-complete . [(1 5 0) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar nil]) (auto-compile . [(1 3 0) ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) "automatically compile Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp"))]) (auth-password-store . [(1 0 3) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) "Integrate auth-source with password-store" single ((:keywords "pass" "password-store" "auth-source" "username" "password" "login"))]) (aurora-config-mode . [(0 0 2) nil "Major mode for Apache Aurora configuration files" single ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration"))]) (aurel . [(0 7) nil "Search, get info, vote and download AUR packages" single ((:url . "https://github.com/alezost/aurel") (:keywords "tools"))]) (async . [(1 6) ((emacs (24)) (cl-lib (0 5))) "Asynchronous processing in Emacs" tar ((:url . "https://github.com/jwiegley/emacs-async"))]) (asilea . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single ((:url . "https://github.com/Fanael/asilea"))]) (artbollocks-mode . [(1 1 2) nil "Improve your writing (especially about art)" single ((:url . "https://github.com/sachac/artbollocks-mode"))]) (aproject . [(0 3) nil "Basic project framework for Emacs" tar ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project"))]) (apples-mode . [(0 0 2) nil "Major mode for editing and executing AppleScript code" tar ((:keywords "applescript" "languages"))]) (anzu . [(0 59) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu"))]) (anything-sage . [(0 0 1) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything"))]) (anything-replace-string . [(0 9 2) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:url . "http://code.101000lab.org"))]) (anything-exuberant-ctags . [(0 1 2) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags"))]) (anything . [(1 3 9) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines"))]) (anyins . [(0 1 1) nil "Insert content at multiple places from shell command or kill-ring" single ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular"))]) (anti-zenburn-theme . [(2 3 1) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ansible-doc . [(0 3) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help"))]) (ansible . [(0 1 0) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org"))]) (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi"))]) (annoying-arrows-mode . [(0 1 0) nil "Ring the bell if using arrows too much" single nil]) (annotate . [(0 4 4) nil "annotate files without changing them" single ((:url . "https://github.com/bastibe/annotate.el"))]) (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil]) (angular-mode . [(1 0) nil "No description available." tar nil]) (android-mode . [(0 4 0) nil "Minor mode for Android application development" single ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes"))]) (anaphora . [(1 0 0) nil "anaphoric macros providing implicit temp variables" single ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions"))]) (anaconda-mode . [(0 1 1) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (amd-mode . [(1 0) ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:keywords "javascript" "amd" "projectile"))]) (alert . [(1 2) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message"))]) (alect-themes . [(0 7) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme"))]) (alchemist . [(1 7 0) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist"))]) (airline-themes . [(1 2) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes.el") (:keywords "evil" "mode-line" "powerline" "airline" "themes"))]) (ahk-mode . [(1 5 5) nil "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation"))]) (aggressive-indent . [(1 4 2) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools"))]) (ag . [(0 46) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single nil]) (aes . [(0 8) nil "Implementation of AES" single ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools"))]) (adoc-mode . [(0 6 4) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc"))]) (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single ((:keywords "language" "modes"))]) (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." single ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location"))]) (ace-popup-menu . [(0 1 1) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Replace GUI popup menu in Emacs with something more efficient" single ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu"))]) (ace-pinyin . [(0 2 3) ((ace-jump-mode (2 0)) (avy (0 2 0))) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" single ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions"))]) (ace-link . [(0 3 0) ((ace-jump-mode (2 0))) "Quickly follow links using `ace-jump-mode'" single ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links"))]) (ace-jump-zap . [(0 1 1) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions"))]) (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" single ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor"))]) (ace-jump-helm-line . [(0 3 3) ((avy (0 2 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions"))]) (ace-jump-buffer . [(0 3 1) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single ((:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(0 1 4) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single ((:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(0 1 2) ((ace-jump-mode (2 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions"))]) (ac-slime . [(0 8) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:url . "https://github.com/purcell/ac-slime"))]) (ac-racer . [(0 1) ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) "auto-complete source of racer" single ((:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php . [(1 7 1) ((emacs (24)) (dash (1)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0)) (company (0 8 12))) "auto-completion and company  source for php for GNU Emacs" tar ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-octave . [(0 4) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion"))]) (ac-mozc . [(0 0 4) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:url . "https://github.com/igjit/ac-mozc"))]) (ac-ispell . [(0 7) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:keywords "languages" "tools"))]) (ac-html-csswatcher . [(0 1 7) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete"))]) (ac-html-bootstrap . [(0 9 3) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx"))]) (ac-html . [(0 31) ((auto-complete (1 4)) (web-completion-data (0 1))) "auto complete source for html tags and attributes" tar ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "rails" "ruby"))]) (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single ((:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(0 7) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages"))]) (ac-geiser . [(0 1) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil]) (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(0 2) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-dcd . [(0 4) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages"))]) (ac-clang . [(1 6 0) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense"))]) (ac-cider . [(0 2 1) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment"))]) (ac-capf . [(0 1) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-cake2 . [(1 0 1) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-cake . [(1 0 0) ((cake (1 4 2)) (auto-complete (1 4))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-anaconda . [(0 1 0) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:url . "https://github.com/proofit404/ac-anaconda"))]) (ac-alchemist . [(0 1) ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single ((:keywords "local" "docs"))]))
