;;; Compiled snippets and support files for `js-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'js-mode
                     '(("re" "refute($0);" "refute" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.yasnippet" nil nil)
                       ("reto" "refute.typeOf(${1:object}, ${2:expected});$0" "refute.typeOf" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.typeOf.yasnippet" nil nil)
                       ("ret" "refute.threw(${1:spy}, ${2:exception});$0" "refute.threw" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.threw.yasnippet" nil nil)
                       ("retn" "refute.tagName(${1:element}, \"${2:tagName}\");$0" "refute.tagName" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.tagName.yasnippet" nil nil)
                       ("res" "refute.same(${1:expected}, ${2:actual});$0" "refute.same" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.same.yasnippet" nil nil)
                       ("rem" "refute.match(${1:actual}, ${2:matcher});" "refute.match" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.match.yasnippet" nil nil)
                       ("reis" "refute.isString(${1:object});$0" "refute.isString" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isString.yasnippet" nil nil)
                       ("reio" "refute.isObject(${1:object});$0" "refute.isObject" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isObject.yasnippet" nil nil)
                       ("rein" "refute.isNumber(${1:object});$0" "refute.isNumber" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isNumber.yasnippet" nil nil)
                       ("rein" "refute.isNull(${1:object});$0" "refute.isNull" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isNull.yasnippet" nil nil)
                       ("rein" "refute.isNaN(${1:object});$0" "refute.isNaN" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isNaN.yasnippet" nil nil)
                       ("reif" "refute.isFunction(${1:object});$0" "refute.isFunction" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isFunction.yasnippet" nil nil)
                       ("reib" "refute.isBoolean(${1:object});$0" "refute.isBoolean" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isBoolean.yasnippet" nil nil)
                       ("reial" "refute.isArrayLike(${1:actual});$0" "refute.isArrayLike" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isArrayLike.yasnippet" nil nil)
                       ("reia" "refute.isArray(${1:object});$0" "refute.isArray" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.isArray.yasnippet" nil nil)
                       ("reid" "refute.inDelta(${1:actual}, ${2:expected}, ${3:delta});$0" "refute.inDelta" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.inDelta.yasnippet" nil nil)
                       ("rex" "refute.exception(f$0${1:, \"${2:type}\"});" "refute.exception" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.exception.yasnippet" nil nil)
                       ("ree" "refute.equals(${1:actual}, ${2:expected});$0" "refute.equals" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.equals.yasnippet" nil nil)
                       ("red" "refute.defined(${1:object});$0" "refute.defined" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.defined.yasnippet" nil nil)
                       ("recn" "refute.className(${1:element}, \"${2:tagName}\");$0" "refute.className" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.className.yasnippet" nil nil)
                       ("recwe" "refute.calledWithExactly(${1:spy}, ${2:arguments});$0" "refute.calledWithExactly" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledWithExactly.yasnippet" nil nil)
                       ("recw" "refute.calledWith(${1:spy}, ${2:arguments});$0" "refute.calledWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledWith.yasnippet" nil nil)
                       ("rec2" "refute.calledTwice(${1:spy});$0" "refute.calledTwice" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledTwice.yasnippet" nil nil)
                       ("rec3" "refute.calledThrice(${1:spy});$0" "refute.calledThrice" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledThrice.yasnippet" nil nil)
                       ("rec1w" "refute.calledOnceWith(${1:spy}, ${2:arg});$0" "refute.calledOnceWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledOnceWith.yasnippet" nil nil)
                       ("rec1" "refute.calledOnce(${1:spy});$0" "refute.calledOnce" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledOnce.yasnippet" nil nil)
                       ("reco" "refute.calledOn(${1:spy}, ${2:obj});$0" "refute.calledOn" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.calledOn.yasnippet" nil nil)
                       ("rec" "refute.called(${1:spy});$0" "refute.called" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.called.yasnippet" nil nil)
                       ("reco" "refute.callOrder(${1:spy}1, ${1:spy2, ...});$0" "refute.callOrder" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.callOrder.yasnippet" nil nil)
                       ("recc" "refute.callCount(${1:spy}, ${2:count});$0" "refute.callCount" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.callCount.yasnippet" nil nil)
                       ("reat" "refute.alwaysThrew(${1:spy}, ${2:exception});$0" "refute.alwaysThrew" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.alwaysThrew.yasnippet" nil nil)
                       ("reacwe" "refute.alwaysCalledWithExactly(${1:spy}, ${2:arguments});$0" "refute.alwaysCalledWithExactly" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.alwaysCalledWithExactly.yasnippet" nil nil)
                       ("reacw" "refute.alwaysCalledWith(${1:spy}, ${2:arguments});$0" "refute.alwaysCalledWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.alwaysCalledWith.yasnippet" nil nil)
                       ("reaco" "refute.alwaysCalledOn(${1:spy}, ${2:obj});$0" "refute.alwaysCalledOn" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/refute.alwaysCalledOn.yasnippet" nil nil)
                       ("tc" "`(buster--maybe-use-strict)\n`var buster = require(\"buster\");\n`(buster--maybe-add-local-asserts)\n`var ${4:${2:$(lower-camel-case (file-name-nondirectory yas/text))}} = require(\"${1:`(buster--guess-lib-folder)`}${2:`(chop-test-suffix (buffer-file-name-body))`}\")$3;\n\nbuster.testCase(\"${5:${2:$(capitalized-words (file-name-nondirectory yas/text))`}}\", {\n  tt$0\n});\n" "buster.testCase.node" buster-testcase-snippets-enabled nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.testCase.node.yasnippet" nil nil)
                       ("tc" "if (typeof require === \"function\" && typeof module !== \"undefined\") {\n  var buster = require(\"buster\");\n  var ${5:`buster-default-global`} = { ${4:${2:$(lower-camel-case (file-name-nondirectory yas/text))}}: require(\"${1:`(buster--guess-lib-folder)`}${2:`(chop-test-suffix (buffer-file-name-body))`}\")$3 };\n}\n\n(function (${8:${7:$(buster--shortcuts-for-globals yas/text)}}) {\n  `(buster--maybe-use-strict)\n ``(buster--maybe-add-local-asserts)\n `buster.testCase(\"${6:${2:$(capitalized-words (file-name-nondirectory yas/text))}}\", {\n    tt$0\n  });\n}(${7:${5:$(if buster-add-default-global-to-iife yas/text)})));" "buster.testCase.mixed" buster-testcase-snippets-enabled nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.testCase.mixed.yasnippet" nil nil)
                       ("tc" "(function (${3:${2:$(buster--shortcuts-for-globals yas/text)}}) {\n  `(buster--maybe-use-strict)\n ``(buster--maybe-add-local-asserts)\n`buster.testCase(\"${1:`(chop-suffix \"Test\" (buffer-file-name-body))`}\", {\n    tt$0\n  });\n}(${2:`(if buster-add-default-global-to-iife buster-default-global)`}));" "buster.testCase.browser" buster-testcase-snippets-enabled nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.testCase.browser.yasnippet" nil nil)
                       ("tt" "\"`buster-test-prefix`${1:do stuff}\": function () {\n        $0\n}`(comma-if-looking-at-whitespace-and-quotes)`" "buster.test" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.test.yasnippet" nil nil)
                       ("td" "tearDown: function () {\n       $0\n}`(comma-if-looking-at-whitespace-and-quotes)`\n" "tearDown" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.tearDown.yasnippet" nil nil)
                       ("su" "setUp: function () {\n       $0\n}`(comma-if-looking-at-whitespace-and-quotes)`\n" "setUp" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.setUp.yasnippet" nil nil)
                       ("cx" "\"${1:context}\": {\n	tt$0\n}`(comma-if-looking-at-whitespace-and-quotes)`" "buster.nestedContext" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/buster.nestedContext.yasnippet" nil nil)
                       ("as" "assert($0);" "assert" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.yasnippet" nil nil)
                       ("asto" "assert.typeOf(${1:object}, ${2:expected});$0" "assert.typeOf" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.typeOf.yasnippet" nil nil)
                       ("ast" "assert.threw(${1:spy}, ${2:exception});$0" "assert.threw" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.threw.yasnippet" nil nil)
                       ("astn" "assert.tagName(${1:element}, \"${2:tagName}\");$0" "assert.tagName" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.tagName.yasnippet" nil nil)
                       ("ass" "assert.same(${1:actual}, ${2:expected});$0" "assert.same" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.same.yasnippet" nil nil)
                       ("asm" "assert.match(${1:actual}, ${2:matcher});" "assert.match" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.match.yasnippet" nil nil)
                       ("asis" "assert.isString(${1:object});$0" "assert.isString" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isString.yasnippet" nil nil)
                       ("asio" "assert.isObject(${1:object});$0" "assert.isObject" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isObject.yasnippet" nil nil)
                       ("asin" "assert.isNumber(${1:object});$0" "assert.isNumber" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isNumber.yasnippet" nil nil)
                       ("asin" "assert.isNull(${1:object});$0" "assert.isNull" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isNull.yasnippet" nil nil)
                       ("asin" "assert.isNaN(${1:object});$0" "assert.isNaN" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isNaN.yasnippet" nil nil)
                       ("asif" "assert.isFunction(${1:object});$0" "assert.isFunction" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isFunction.yasnippet" nil nil)
                       ("asib" "assert.isBoolean(${1:object});$0" "assert.isBoolean" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isBoolean.yasnippet" nil nil)
                       ("asial" "assert.isArrayLike(${1:actual});$0" "assert.isArrayLike" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isArrayLike.yasnippet" nil nil)
                       ("asia" "assert.isArray(${1:object});$0" "assert.isArray" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.isArray.yasnippet" nil nil)
                       ("asid" "assert.inDelta(${1:actual}, ${2:expected}, ${3:delta});$0" "assert.inDelta" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.inDelta.yasnippet" nil nil)
                       ("asx" "assert.exception(function () {\n    $0\n});" "assert.exception" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.exception.yasnippet" nil nil)
                       ("ase" "assert.equals(${1:actual}, ${2:expected});$0" "assert.equals" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.equals.yasnippet" nil nil)
                       ("asd" "assert.defined(${1:object});$0" "assert.defined" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.defined.yasnippet" nil nil)
                       ("ascn" "assert.className(${1:element}, \"${2:className}\");$0" "assert.className" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.className.yasnippet" nil nil)
                       ("ascwe" "assert.calledWithExactly(${1:spy}, ${2:arguments});$0" "assert.calledWithExactly" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledWithExactly.yasnippet" nil nil)
                       ("ascw" "assert.calledWith(${1:spy}, ${2:arguments});$0" "assert.calledWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledWith.yasnippet" nil nil)
                       ("asc2" "assert.calledTwice(${1:spy});$0" "assert.calledTwice" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledTwice.yasnippet" nil nil)
                       ("asc3" "assert.calledThrice(${1:spy});$0" "assert.calledThrice" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledThrice.yasnippet" nil nil)
                       ("asc1w" "assert.calledOnceWith(${1:spy}, ${2:arg});$0" "assert.calledOnceWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledOnceWith.yasnippet" nil nil)
                       ("asc1" "assert.calledOnce(${1:spy});$0" "assert.calledOnce" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledOnce.yasnippet" nil nil)
                       ("asco" "assert.calledOn(${1:spy}, ${2:obj});$0" "assert.calledOn" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.calledOn.yasnippet" nil nil)
                       ("asc" "assert.called(${1:spy});$0" "assert.called" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.called.yasnippet" nil nil)
                       ("asco" "assert.callOrder(${1:spy1}, ${2:spy2, ...});$0" "assert.callOrder" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.callOrder.yasnippet" nil nil)
                       ("ascc" "assert.callCount(${1:spy}, ${2:count});$0" "assert.callCount" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.callCount.yasnippet" nil nil)
                       ("asat" "assert.alwaysThrew(${1:spy}, ${2:exception});$0" "assert.alwaysThrew" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.alwaysThrew.yasnippet" nil nil)
                       ("asacwe" "assert.alwaysCalledWithExactly(${1:spy}, ${2:arguments});$0" "assert.alwaysCalledWithExactly" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.alwaysCalledWithExactly.yasnippet" nil nil)
                       ("asacw" "assert.alwaysCalledWith(${1:spy}, ${2:arguments});$0" "assert.alwaysCalledWith" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.alwaysCalledWith.yasnippet" nil nil)
                       ("asaco" "assert.alwaysCalledOn(${1:spy}, ${2:obj});$0" "assert.alwaysCalledOn" nil nil nil "/Users/jason/.emacs.d/elpa/buster-snippets-20141208.238/snippets/js-mode/assert.alwaysCalledOn.yasnippet" nil nil)))


;;; Do not edit! File generated at Sat Nov  7 12:16:41 2015
