;;; Compiled snippets and support files for `csharp-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'csharp-mode
                     '(("xmls" "{\n      XmlSerializer s1 = new XmlSerializer(typeof(${1:type}));\n\n      // use this to \"suppress\" the default xsd and xsd-instance namespaces\n      XmlSerializerNamespaces ns = new XmlSerializerNamespaces();\n      ns.Add(\"\", \"\");\n\n      s1.Serialize(new XTWFND(System.Console.Out), object, ns);\n      System.Console.WriteLine(\"\\n\");\n}\n\n  $0\n  /// XmlTextWriterFormattedNoDeclaration\n  /// helper class : eliminates the XML Documentation at the\n  /// start of a XML doc. \n  /// XTWFND = XmlTextWriterFormattedNoDeclaration\n  /// usage:       s1.Serialize(new XTWFND(System.Console.Out), thing, ns);\n\n  public class XTWFND : System.Xml.XmlTextWriter\n  {\n    public XTWFND(System.IO.StringWriter w) : base(w) { Formatting=System.Xml.Formatting.Indented;  }\n    public XTWFND(System.IO.TextWriter w) : base(w) { Formatting = System.Xml.Formatting.Indented; }\n    public XTWFND(System.IO.Stream s) : base(s, null) { Formatting = System.Xml.Formatting.Indented; }\n    public XTWFND(string filename) : base(filename, null) { Formatting = System.Xml.Formatting.Indented; }\n    public override void WriteStartDocument() { }\n  }\n\n" "xmlserializer { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/xmls" nil nil)
                       ("while" "while (${1:condition})\n{\n    ${0://thing to do}\n}" "while (...) { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/while" nil nil)
                       ("using.3" "using $1;\n" "using ...;" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/using.3" nil nil)
                       ("using.2" "using System.$1;\n" "using System....;" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/using.2" nil nil)
                       ("using.1" "using System;\n" "using System;" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/using.1" nil nil)
                       ("using" "using (${1:type} ${2:var} = new ${1:type}(${4:ctor args})) \n{\n    ${5:// body...}\n}" "using ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/using" nil nil)
                       ("try" "try \n{\n  $0\n}\ncatch (System.Exception exc1)\n{\n  throw new Exception(\"uncaught exception\", exc1);\n}" "try { ... } catch { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/try" nil nil)
                       ("singleton" "#region Singleton ${1:className}\npublic sealed class $1\n{\n    private readonly static $1 _instance = new $1();\n\n    public static $1 Instance  { get { return _instance; } }\n\n    private $1()\n    {\n	// implementation here\n    }\n}\n\n#endregion\n" "public sealed class Singleton {...} " nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/singleton" nil nil)
                       ("setting" " #region Property${1:PropName}\n\n    private string default$1 = ${2:defaultValue};\n    private string _$1;\n    public string $1\n    {\n        get\n        {\n                if (_$1 == null)\n                {\n                    _$1 = System.Configuration.ConfigurationManager.AppSettings[\"$1\"];\n\n                    if (string.IsNullOrEmpty(_$1))\n                    {\n                        _$1 = default$1;\n                    }\n                }\n                return this._$1;\n            }\n        set\n        {\n            string new$1 = value;\n	    // optional validation:\n            //Validation.EnforceXxxx(new$1, \"$1\");\n            _$1 = new$1;\n        }\n    }\n\n#endregion\n" "config setting" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/setting" nil nil)
                       ("region" "#region $1\n$0\n#endregion\n" "#region ... #endregion" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/region" nil nil)
                       ("prop.1" "/// <summary>\n/// $5\n/// </summary>\n/// <value>$6</value>\n$1 $2 $3\n{\n    get {\n        return this.$4;\n    }\n    set {\n        this.$4 = value;\n    }\n}\n" "property ... ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/prop.1" nil nil)
                       ("prop" "private ${1:Type} _${2:Name};\npublic ${1:Type} ${2:Name}\n{\n  get \n  {\n    ${3://get impl}\n  }\n\n  set \n  {\n    ${4://get impl}\n  }\n\n}" "property ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/prop" nil nil)
                       ("pa" "      //Console.WriteLine(\"args.Length={0}\", args.Length);\n      if (args.Length < 1) Usage();\n      else \n      {\n	switch (args[0].ToLower())\n	{\n	case \"$1\":\n	  if (args.Length != 3) Usage(); \n	  else\n	    CallSomethin(args[1], args[2]);\n	  break;\n	case \"$2\":\n	  if (args.Length != 2) Usage();\n	  else\n	    SomethingElse(args[1]);\n	  break;\n	default:\n	  Usage();\n	  break;\n	}\n      }\n\n" "switch(args[0]) {...}" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/pa" nil nil)
                       ("ofd" "var dlg = new System.Windows.Forms.OpenFileDialog();\ndlg.Filter = \"${1:filter string}\"; // ex: \"C# (*.cs)|*.cs|Text (*.txt)|*.txt\";\nif (dlg.ShowDialog() == DialogResult.OK)\n{\n    string fileName = dlg.FileName;\n    $0\n}\n" "new OpenFileDialog; if (DialogResult.OK) { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/ofd" nil nil)
                       ("namespace" "namespace $1\n{\n$0\n}\n" "namespace .. { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/namespace" nil nil)
                       ("method" "/// <summary>\n/// ${5:Description}\n/// </summary>${2:$(if (string= (upcase text) \"VOID\") \"\" (format \"%s%s%s\" \"\\n/// <returns><c>\" text \"</c></returns>\"))}\n${1:public} ${2:void} ${3:MethodName}($4)\n{\n$0\n}\n" "public void Method { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/method" nil nil)
                       ("ife" "if (${1:predicate})\n{\n  ${2:// then clause}\n}\nelse\n{\n  ${3:// else clause}\n}" "if (...) { ... } else { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/ife" nil nil)
                       ("fore" "foreach (${1:type} ${2:var} in  ${3:IEnumerable}) \n{\n    ${4:// body...}\n}" "foreach ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/fore" nil nil)
                       ("for" "for (int ${1:index}=0; $1<${2:Limit};  $1++) \n{\n    ${3:// body...}\n}" "for (...) { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/for" nil nil)
                       ("dprop" "\npublic ${1:String} ${2:Name}\n{\n  get { return ($1)GetValue($2Property); }\n  set { SetValue($2Property, value); }\n}\npublic static readonly DependencyProperty $2Property = DependencyProperty.Register(\"$2\", typeof($1), typeof(${3:EnclosingType}));\n\n$0\n" "DependencyProperty" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/dprop" nil nil)
                       ("comment.3" "/// <exception cref=\"$1\">$2</exception>\n" "/// <exception cref=\"...\"> ... </exception>" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/comment.3" nil nil)
                       ("comment.2" "/// <returns>$1</returns>\n" "/// <param name=\"...\"> ... </param>" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/comment.2" nil nil)
                       ("comment.1" "/// <param name=\"$1\">$2</param>\n" "/// <param name=\"...\"> ... </param>" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/comment.1" nil nil)
                       ("comment" "/// <summary>\n/// $1\n/// </summary>\n" "/// <summary> ... </summary>" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/comment" nil nil)
                       ("cla.1" "${5:public} class ${1:Name}\n{\n    #region Ctor & Destructor\n    /// <summary>\n    /// ${3:Standard Constructor}\n    /// </summary>\n    public $1($2)\n    {\n    }\n\n    /// <summary>\n    /// ${4:Default Destructor}\n    /// </summary>    \n    public ~$1()\n    {\n    }\n    #endregion\n}\n" "class ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/cla.1" nil nil)
                       ("cla" "public class ${1:Classname}\n{\n  // default ctor\n  public ${1:Classname}()\n  {\n  }\n  \n  ${2:// methods here}\n}" "class ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/cla" nil nil)
                       ("ca" "  List<String> Values = new List<String>() { \"7\", \"13\", \"41\", \"3\" };\n\n  // ConvertAll maps the given delegate across all the List elements\n  var foo = Values.ConvertAll((s) => { return System.Convert.ToInt32(s); }) ; \n\n  System.Console.WriteLine(\"typeof(foo) = {0}\", foo.GetType().ToString());\n\n  Array.ForEach(foo.ToArray(),Console.WriteLine);\n" "ConvertAll((s) => { ... });" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/ca" nil nil)
                       ("attrib.2" "/// <summary>\n/// $3\n/// </summary>\nprivate $1 ${2:$(if (> (length text) 0) (format \"_%s%s\" (downcase (substring text 0 1)) (substring text 1 (length text))) \"\")};\n\n/// <summary>\n/// ${3:Description}\n/// </summary>\n/// <value><c>$1</c></value>\npublic ${1:Type} ${2:Name}\n{\n    get {\n        return this.${2:$(if (> (length text) 0) (format \"_%s%s\" (downcase (substring text 0 1)) (substring text 1 (length text))) \"\")};\n    }\n    set {\n        this.${2:$(if (> (length text) 0) (format \"_%s%s\" (downcase (substring text 0 1)) (substring text 1 (length text))) \"\")} = value;\n    }\n}\n" "private _attribute ....; public Property ... ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/attrib.2" nil nil)
                       ("attrib.1" "/// <summary>\n/// $3\n/// </summary>\nprivate $1 $2;\n\n/// <summary>\n/// $4\n/// </summary>\n/// <value>$5</value>\npublic $1 $2\n{\n    get {\n        return this.$2;\n    }\n    set {\n        this.$2 = value;\n    }\n}\n" "private attribute ....; public property ... ... { ... }" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/attrib.1" nil nil)
                       ("attrib" "/// <summary>\n/// $3\n/// </summary>\nprivate $1 $2;\n" "private attribute ....;" nil nil nil "/Users/jason/.emacs.d/snippets/csharp-mode/attrib" nil nil)))


;;; Do not edit! File generated at Sat Nov  7 12:16:41 2015
