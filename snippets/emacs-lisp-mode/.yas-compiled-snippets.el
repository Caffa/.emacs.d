;;; Compiled snippets and support files for `emacs-lisp-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'emacs-lisp-mode
                     '(("x-word-or-region.yasnippet" ";; example of a command that works on current word or text selection\n(defun down-case-word-or-region ()\n  \"Lower case the current word or text selection.\"\n(interactive)\n(let (pos1 pos2 meat)\n  (if (and transient-mark-mode mark-active)\n      (setq pos1 (region-beginning)\n            pos2 (region-end))\n    (setq pos1 (car (bounds-of-thing-at-point 'symbol))\n          pos2 (cdr (bounds-of-thing-at-point 'symbol))))\n\n  ; now, pos1 and pos2 are the starting and ending positions\n  ; of the current word, or current text selection if exists\n\n  ;; put your code here.\n  $0\n  ;; Some example of things you might want to do\n  (downcase-region pos1 pos2) ; example of a func that takes region as args\n  (setq meat (buffer-substring-no-properties pos1 pos2)) ; grab the text.\n  (delete-region pos1 pos2) ; get rid of it\n  (insert \"newText\") ; insert your new text\n\n  )\n)\n" "Command that works on region or word" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-word-or-region.yasnippet" nil nil)
                       ("x-traverse_dir.yasnippet" ";; apply a function to all files in a dir\n(require 'find-lisp)\n(mapc 'my-process-file (find-lisp-find-files \"~/myweb/\" \"\\\\.html$\"))\n" "traversing a directory" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-traverse_dir.yasnippet" nil nil)
                       ("x-grabthing.yasnippet" "(setq $0 (thing-at-point 'symbol))\n" "grab word under cursor" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-grabthing.yasnippet" nil nil)
                       ("x-grabstring.yasnippet" "(setq $0 (buffer-substring-no-properties myStartPos myEndPos))\n" "grab buffer substring" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-grabstring.yasnippet" nil nil)
                       ("x-find-replace.yasnippet" "(defun replace-html-chars-region (start end)\n  \"Replace “<” to “&lt;” and other chars in HTML.\nThis works on the current region.\"\n  (interactive \"r\")\n  (save-restriction \n    (narrow-to-region start end)\n    (goto-char (point-min))\n    (while (search-forward \"&\" nil t) (replace-match \"&amp;\" nil t))\n    (goto-char (point-min))\n    (while (search-forward \"<\" nil t) (replace-match \"&lt;\" nil t))\n    (goto-char (point-min))\n    (while (search-forward \">\" nil t) (replace-match \"&gt;\" nil t))\n    )\n  )\n" "find and replace on region" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-find-replace.yasnippet" nil nil)
                       ("x-file.read-lines.yasnippet" "(defun read-lines (filePath)\n  \"Return a list of lines in FILEPATH.\"\n  (with-temp-buffer\n    (insert-file-contents filePath)\n    (split-string\n     (buffer-string) \"\\n\" t)) )\n\n;; process all lines\n(mapc \n (lambda (aLine) \n   (message aLine) ; do your stuff here\n   )\n (read-lines \"inputFilePath\")\n)" "read lines of a file" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-file.read-lines.yasnippet" nil nil)
                       ("x-file.process.yasnippet" "(defun doThisFile (fpath)\n  \"Process the file at path FPATH ...\"\n  (let ()\n    ;; create temp buffer without undo record or font lock. (more efficient)\n    ;; first space in temp buff name is necessary\n    (set-buffer (get-buffer-create \" myTemp\"))\n    (insert-file-contents fpath nil nil nil t)\n\n    ;; process it ...\n    ;; (goto-char 0) ; move to begining of file's content (in case it was open)\n    ;; ... do something here\n    ;; (write-file fpath) ;; write back to the file\n\n    (kill-buffer \" myTemp\")))\n" "a function that process a file" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-file.process.yasnippet" nil nil)
                       ("x-dired.process_marked.yasnippet" ";; idiom for processing a list of files in dired's marked files\n \n;; suppose myProcessFile is your function that takes a file path\n;; and do some processing on the file\n\n(defun dired-myProcessFile ()\n  \"apply myProcessFile function to marked files in dired.\"\n  (interactive)\n  (require 'dired)\n  (mapc 'myProcessFile (dired-get-marked-files))\n)\n\n;; to use it, type M-x dired-myProcessFile\n" "process marked files in dired" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/x-dired.process_marked.yasnippet" nil nil)
                       ("wcb" "(with-current-buffer $0 )" "with-current-buffer" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/with-current-buffer.yasnippet" nil nil)
                       ("wg" "(widget-get $0 )" "widget-get" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/widget-get.yasnippet" nil nil)
                       ("while" "(while $0)" "while" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/while.yasnippet" nil nil)
                       ("when" "(when $0)" "when" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/when.yasnippet" nil nil)
                       ("unless" "(unless $0)" "unless" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/unless.yasnippet" nil nil)
                       ("substring" "(substring STRING$0 FROM &optional TO)\n" "substring" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/substring.yasnippet" nil nil)
                       ("stringp" "(stringp $0)" "stringp" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/stringp.yasnippet" nil nil)
                       ("string=" "(string= $0 )" "string=" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/string=.yasnippet" nil nil)
                       ("string" "(string $0 )" "string" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/string.yasnippet" nil nil)
                       ("stn" "(string-to-number \"$0\")" "string-to-number" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/string-to-number.yasnippet" nil nil)
                       ("sm" "(string-match \"REGEXP$0\" \"STRING\" &optional START)" "string-match" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/string-match.yasnippet" nil nil)
                       ("scf" "(skip-chars-forward \"$0\" &optional LIM)" "skip-chars-forward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/skip-chars-forward.yasnippet" nil nil)
                       ("scb" "(skip-chars-backward \"$0\" &optional LIM)" "skip-chars-backward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/skip-chars-backward.yasnippet" nil nil)
                       ("s" "(setq $0 )" "setq" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/setq.yasnippet" nil nil)
                       ("set" "(set $0 )" "set" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/set.yasnippet" nil nil)
                       ("sm" "(set-mark $0)" "set-mark" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/set-mark.yasnippet" nil nil)
                       ("sb" "(set-buffer $0 )" "set-buffer" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/set-buffer.yasnippet" nil nil)
                       ("sf" "(search-forward \"$0\" &optional BOUND NOERROR COUNT)" "search-forward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/search-forward.yasnippet" nil nil)
                       ("sb" "(search-backward \"$0\" &optional BOUND NOERROR COUNT)" "search-backward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/search-backward.yasnippet" nil nil)
                       ("se" "(save-excursion $0)" "save-excursion" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/save-excursion.yasnippet" nil nil)
                       ("require" "(require $0 )" "require" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/require.yasnippet" nil nil)
                       ("rr" "(replace-regexp REGEXP$0 TO-STRING &optional DELIMITED START END)" "replace-regexp" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/replace-regexp.yasnippet" nil nil)
                       ("rris" "(replace-regexp-in-string REGEXP$0 REP STRING &optional FIXEDCASE LITERAL SUBEXP START)\n" "replace-regexp-in-string" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/replace-regexp-in-string.yasnippet" nil nil)
                       ("repeat" "(repeat $0 )" "repeat" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/repeat.yasnippet" nil nil)
                       ("re" "(region-end)" "region-end" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/region-end.yasnippet" nil nil)
                       ("rb" "(region-beginning)" "region-beginning" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/region-beginning.yasnippet" nil nil)
                       ("rsf" "(re-search-forward REGEXP$0 &optional BOUND NOERROR COUNT)" "re-search-forward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/re-search-forward.yasnippet" nil nil)
                       ("rsb" "(re-search-backward REGEXP$0 &optional BOUND NOERROR COUNT)" "re-search-backward" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/re-search-backward.yasnippet" nil nil)
                       ("put" "(put $0 PROPNAME VALUE)" "put" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/put.yasnippet" nil nil)
                       ("push" "(push $0 )" "push" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/push.yasnippet" nil nil)
                       ("progn" "(progn $0)" "progn" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/progn.yasnippet" nil nil)
                       ("print" "(print $0)" "print" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/print.yasnippet" nil nil)
                       ("princ" "(princ $0)" "princ" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/princ.yasnippet" nil nil)
                       ("p" "(point)" "point" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/point.yasnippet" nil nil)
                       ("pm" "(point-min)" "point-min" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/point-min.yasnippet" nil nil)
                       ("point-max" "(point-max)" "point-max" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/point-max.yasnippet" nil nil)
                       ("o" "(or $0 )" "or" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/or.yasnippet" nil nil)
                       ("nts" "(number-to-string $0)" "number-to-string" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/number-to-string.yasnippet" nil nil)
                       ("null" "(null $0)" "null" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/null.yasnippet" nil nil)
                       ("nth" "(nth N$0 LIST)" "nth" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/nth.yasnippet" nil nil)
                       ("n" "(not $0 )" "not" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/not.yasnippet" nil nil)
                       ("msg" "(message \"FORMATSTRING$0\" &optional ARGS)" "message" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/message.yasnippet" nil nil)
                       ("memq" "(memq ELT$0 LIST)" "memq" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/memq.yasnippet" nil nil)
                       ("ms" "(match-string $0 )" "match-string" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/match-string.yasnippet" nil nil)
                       ("me" "(match-end N$0)" "match-end" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/match-end.yasnippet" nil nil)
                       ("mb" "(match-beginning N$0)" "match-beginning" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/match-beginning.yasnippet" nil nil)
                       ("mapcar" "(mapcar $0 )" "mapcar" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/mapcar.yasnippet" nil nil)
                       ("mapc" "(mapc '$0 SEQUENCE)" "mapc" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/mapc.yasnippet" nil nil)
                       ("mlv" "(make-local-variable $0)" "make-local-variable" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/make-local-variable.yasnippet" nil nil)
                       ("la" "(looking-at $0)" "looking-at" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/looking-at.yasnippet" nil nil)
                       ("list" "(list $0)" "list" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/list.yasnippet" nil nil)
                       ("lep" "(line-end-position)" "line-end-position" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/line-end-position.yasnippet" nil nil)
                       ("lbp" "(line-beginning-position)" "line-beginning-position" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/line-beginning-position.yasnippet" nil nil)
                       ("l" "(let ($1 )\n $0\n)" "let" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/let.yasnippet" nil nil)
                       ("length" "(length $0)" "length" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/length.yasnippet" nil nil)
                       ("lambda" "(lambda ($0) \"DOCSTRING\" (interactive) BODY)" "lambda" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/lambda.yasnippet" nil nil)
                       ("kb" "(kill-buffer $0)" "kill-buffer" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/kill-buffer.yasnippet" nil nil)
                       ("kbd" "(kbd \"$0\")" "kbd" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/kbd.yasnippet" nil nil)
                       ("interactive" "(interactive ${1:$$(yas/choose-value '( ))})" "interactive" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/interactive.yasnippet" nil nil)
                       ("i" "(insert $0)" "insert" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/insert.yasnippet" nil nil)
                       ("ini" ";;; init-${1:mode-name} --- initialize $1\n;;; Commentary:\n;;; Code:\n(require 'use-package)\n\n(use-package $1\n  :init ;; before use\n  $2\n  :config ;; after use\n  $3\n  :bind\n  $4\n  )\n\n(provide 'init-$1)\n;;; init-$1 ends here\n" "init mode template" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/init-mode" nil nil)
                       ("if" "(if $0)" "if" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/if.yasnippet" nil nil)
                       ("gc" "(goto-char $0)" "goto-char" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/goto-char.yasnippet" nil nil)
                       ("gsk" "(global-set-key (kbd \"C-$0\") 'COMMAND)" "global-set-key" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/global-set-key.yasnippet" nil nil)
                       ("get" "(get SYMBOL$0 PROPNAME)" "get" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/get.yasnippet" nil nil)
                       ("function" "(function $0 )" "function" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/function.yasnippet" nil nil)
                       ("funcall" "(funcall $0)" "funcall" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/funcall.yasnippet" nil nil)
                       ("fl" "(forward-line $0 )" "forward-line" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/forward-line.yasnippet" nil nil)
                       ("fc" "(forward-char $0)" "forward-char" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/forward-char.yasnippet" nil nil)
                       ("format" "(format \"$0\" &optional OBJECTS)\n" "format" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/format.yasnippet" nil nil)
                       ("ff" "(find-file $0 )" "find-file" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/find-file.yasnippet" nil nil)
                       ("frn" "(file-relative-name $0 )" "file-relative-name" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/file-relative-name.yasnippet" nil nil)
                       ("fnn" "(file-name-nondirectory $0 )" "file-name-nondirectory" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/file-name-nondirectory.yasnippet" nil nil)
                       ("fboundp" "(fboundp '$0 )" "fboundp" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/fboundp.yasnippet" nil nil)
                       ("format" "(format \"$0\" &optional OBJECTS)\n" "format" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/f.yasnippet" nil nil)
                       ("efn" "(expand-file-name $0 )" "expand-file-name" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/expand-file-name.yasnippet" nil nil)
                       ("error" "(error \"$0\" &optional ARGS)" "error" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/error.yasnippet" nil nil)
                       ("equal" "(equal $0)" "equal" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/equal.yasnippet" nil nil)
                       ("eq" "(eq $0)" "eq" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/eq.yasnippet" nil nil)
                       ("eol" "(end-of-line)" "end-of-line" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/end-of-line.yasnippet" nil nil)
                       ("dolist" "(dolist $0 )" "dolist" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/dolist.yasnippet" nil nil)
                       ("dr" "(delete-region $0 )" "delete-region" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/delete-region.yasnippet" nil nil)
                       ("defvar" "(defvar SYMBOL &optional INITVALUE \"DOCSTRING\")" "defvar" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/defvar.yasnippet" nil nil)
                       ("d" "(defun $1 ()\n  \"DOCSTRING\"\n  (interactive)\n  (let (var1)\n    (setq var1 some)\n    $0\n  ))" "defun" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/defun.yasnippet" nil nil)
                       ("defsubst" "(defsubst $0 )" "defsubst" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/defsubst.yasnippet" nil nil)
                       ("dk" "(define-key KEYMAPNAME$0 (kbd \"M-b\") 'FUNCNAME)" "define-key" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/define-key.yasnippet" nil nil)
                       ("defcustom" "(defcustom $0 VALUE \"DOC\" &optional ARGS)" "defcustom" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/defcustom.yasnippet" nil nil)
                       ("defalias" "(defalias 'SYMBOL$0 'DEFINITION &optional DOCSTRING)" "defalias" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/defalias.yasnippet" nil nil)
                       ("ca" "(custom-autoload$0 SYMBOL LOAD &optional NOSET)" "custom-autoload" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/custom-autoload.yasnippet" nil nil)
                       ("cb" "(current-buffer)" "current-buffer" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/current-buffer.yasnippet" nil nil)
                       ("copy" ";;; ${1:script-name}.el - ${2:description}\n(defconst $1-version \"${3:version}\")\n\n;; Copyright (c)`(format-time-string \"%Y\")` ${5:author}. (by)(nc)(sa) Some rights reserved.\n;; Author: $5 <${6:email}>\n\n;; This file is not part of GNU Emacs.\n\n;; This program is free software; you can redistribute it and/or\n;; modify it under the terms of the GNU General Public License as\n;; published by the Free Software Foundation version 2.\n\n;; This program is distributed in the hope that it will be useful, but\n;; WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n;; General Public License for more details.\n\n;; For a copy of the GNU General Public License, search the Internet,\n;; or write to the Free Software Foundation, Inc., 59 Temple Place,\n;; Suite 330, Boston, MA 02111-1307 USA\n\n;;\n;; Commentary:\n;;\n;; $0\n" "copyright" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/copy" nil nil)
                       ("consp" "(consp $0 )" "consp" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/consp.yasnippet" nil nil)
                       ("cons" "(cons $0)" "cons" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/cons.yasnippet" nil nil)
                       ("cc" "(condition-case $0 )" "condition-case" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/condition-case.yasnippet" nil nil)
                       ("cond" "(cond\n(CONDITION$0 BODY)\n(CONDITION BODY)\n)" "cond" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/cond.yasnippet" nil nil)
                       ("concat" "(concat $0)" "concat" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/concat.yasnippet" nil nil)
                       ("cdr" "(cdr $0)" "cdr" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/cdr.yasnippet" nil nil)
                       ("car" "(car $0)" "car" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/car.yasnippet" nil nil)
                       ("bs" "(buffer-substring START$0 END)\n" "buffer-substring" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/buffer-substring.yasnippet" nil nil)
                       ("bsnp" "(buffer-substring-no-properties START$0 END)\n" "buffer-substring-no-properties" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/buffer-substring-no-properties.yasnippet" nil nil)
                       ("bfn" "(buffer-file-name)" "buffer-file-name" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/buffer-file-name.yasnippet" nil nil)
                       ("bol" "(beginning-of-line)" "beginning-of-line" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/beginning-of-line.yasnippet" nil nil)
                       ("bc" "(backward-char $0)" "backward-char" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/backward-char.yasnippet" nil nil)
                       ("autoload" "(autoload 'FUNCNAME$0 \"FILENAME\" &optional \"DOCSTRING\" INTERACTIVE TYPE)\n\n" "autoload" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/autoload.yasnippet" nil nil)
                       ("assq" "(assq KEY$0 LIST)" "assq" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/assq.yasnippet" nil nil)
                       ("aref" "(aref ARRAY$0 INDEX)" "aref" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/aref.yasnippet" nil nil)
                       ("apply" "(apply $0 )" "apply" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/apply.yasnippet" nil nil)
                       ("append" "(append $0 )" "append" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/append.yasnippet" nil nil)
                       ("a" "(and $0)" "and" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/and.yasnippet" nil nil)
                       ("ah" "(add-hook HOOK$0 FUNCTION)" "add-hook" nil nil nil "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/add-hook.yasnippet" nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'emacs-lisp-mode
                     '(("defface" "(defface ${1:face-name}\n       '(\n         ;; 24bit\n         (((class color) (min-colors 16777216) (background dark )) :background \"${2:unspecified}\"   :foreground \"${3:unspecified}\" :underline \"${4:unspecified}\" :bold ${5:unspecified} :italic ${6:unspecified} :height ${7:unspecified} )\n         (((class color) (min-colors 16777216) (background light)) :background \"${8:unspecified}\"   :foreground \"${9:unspecified}\" :underline \"${10:unspecified}\" :bold ${11:unspecified} :italic ${12:unspecified} :height ${13:unspecified} )\n         ;; xterm 256 \n         (((class color) (min-colors 254)      (background dark )) :background \"${14:unspecified}\"   :foreground \"${15:unspecified}\" :underline \"${16:unspecified}\" :bold ${17:unspecified} :italic ${18:unspecified} :height ${19:unspecified} )\n         (((class color) (min-colors 254)      (background light)) :background \"${20:unspecified}\"   :foreground \"${21:unspecified}\" :underline \"${22:unspecified}\" :bold ${23:unspecified} :italic ${24:unspecified} :height ${25:unspecified} )\n         ;; rxvt 88 \n         (((class color) (min-colors 88)       (background dark )) :background \"${26:unspecified}\"   :foreground \"${27:unspecified}\" :underline \"${28:unspecified}\" :bold ${29:unspecified} :italic ${30:unspecified} :height ${31:unspecified} )\n         (((class color) (min-colors 88)       (background light)) :background \"${32:unspecified}\"   :foreground \"${33:unspecified}\" :underline \"${34:unspecified}\" :bold ${35:unspecified} :italic ${36:unspecified} :height ${37:unspecified} )\n         ;; ansi 16 \n         (((class color) (min-colors 16)       (background dark))  :background \"${38:unspecified}\"   :foreground \"${39:unspecified}\" :underline \"${40:unspecified}\" :bold ${41:unspecified} :italic ${42:unspecified} :height ${43:unspecified} )\n         (((class color) (min-colors 16)       (background light)) :background \"${44:unspecified}\"   :foreground \"${45:unspecified}\" :underline \"${46:unspecified}\" :bold ${47:unspecified} :italic ${48:unspecified} :height ${49:unspecified} )\n         ;; default case \n         (t                                                        :background \"${50:unspecified}\"   :foreground \"${51:unspecified}\" :underline \"${52:unspecified}\" :bold ${53:unspecified} :italic ${54:unspecified} :height ${55:unspecified} ))\n         \n       \"${56:docstring}\"\n       :group '${57:group})\n" "defface template" nil
                        ("deftheme")
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        "/Users/jason/.emacs.d/snippets/emacs-lisp-mode/deftheme/defface" nil nil)))


;;; Do not edit! File generated at Sat Nov  7 12:16:41 2015
