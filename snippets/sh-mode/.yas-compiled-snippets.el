;;; Compiled snippets and support files for `sh-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'sh-mode
                     '(("wh" "while read ${1:variable}; do\n  $0\ndone\n" "while" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/wh" nil nil)
                       ("init" "#!/bin/sh\n### BEGIN INIT INFO\n# Provides:\n# Required-Start:    $remote_fs $syslog\n# Required-Stop:     $remote_fs $syslog\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start daemon at boot time\n# Description:       Enable service provided by daemon.\n### END INIT INFO\n\ndir=\"${1:/usr/local/bin/}\"\nuser=\"${2:username}\"\ncmd=\"${3:command}\"\n\nname=\\`basename \\$0\\`\npid_file=\"/var/run/${name}.pid\"\nstdout_log=\"/var/log/${name}.log\"\nstderr_log=\"/var/log/${name}.err\"\n\nget_pid() {\n    cat \"$pid_file\"\n}\n\nis_running() {\n    [ -f \"$pid_file\" ] && ps \\`get_pid\\` > /dev/null 2>&1\n}\n\ncase \"\\$1\" in\n    start)\n    if is_running; then\n        echo \"Already started\"\n    else\n        echo \"Starting $name\"\n        cd \"$dir\"\n        sudo -u \"$user\" $cmd >> \"$stdout_log\" 2>> \"$stderr_log\" &\n        echo $! > \"$pid_file\"\n        if ! is_running; then\n            echo \"Unable to start, see $stdout_log and $stderr_log\"\n            exit 1\n        fi\n    fi\n    ;;\n    stop)\n    if is_running; then\n        echo -n \"Stopping $name..\"\n        kill \\`get_pid\\`\n        for i in {1..10}\n        do\n            if ! is_running; then\n                break\n            fi\n\n            echo -n \".\"\n            sleep 1\n        done\n        echo\n\n        if is_running; then\n            echo \"Not stopped; may still be shutting down or shutdown may have failed\"\n            exit 1\n        else\n            echo \"Stopped\"\n            if [ -f \"$pid_file\" ]; then\n                rm \"$pid_file\"\n            fi\n        fi\n    else\n        echo \"Not running\"\n    fi\n    ;;\n    restart)\n    \\$0 stop\n    if is_running; then\n        echo \"Unable to stop, will not attempt to start\"\n        exit 1\n    fi\n    \\$0 start\n    ;;\n    status)\n    if is_running; then\n        echo \"Running\"\n    else\n        echo \"Stopped\"\n        exit 1\n    fi\n    ;;\n    *)\n    echo \"Usage: \\$0 {start|stop|restart|status}\"\n    exit 1\n    ;;\nesac\n\nexit 0\n" "init" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/init" nil nil)
                       ("ifs" "if [ ${1:$$(yas/choose-value '(\"-z\" \"-n\"))} \"$2\" ${3:$$(yas/choose-value '(\"=\" \"!=\" \"<\" \">\"))} \"$4\" ]; then\n  $0\nfi\n" "ifs - string comparison tests" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/ifs" nil nil)
                       ("ifi" "if [[ \"$1\" -${2:$$(yas/choose-value '(\n\"le\"\n\"lt\"\n\"ge\"\n\"gt\" \n\"ne\" \n\"eq\" \n))} \"$3\" ]]; then\n  $0\nfi\n" "ifi - integer comparison tests" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/ifi" nil nil)
                       ("ifff" "if [ $1 -${2:$$(yas/choose-value '(\"nt\" \"ot\" \"ef\"))} $3 ]; then\n  $0\nfi\n" "iff - file tests" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/ifff" nil nil)
                       ("iff" "if [ -${1:$$(yas/choose-value '(\n\"G\"\n\"O\"\n\"x\"\n\"w\"\n\"r\"\n\"s\"\n\"d\"\n\"f\"\n\"e\" \n ))} $2 ]; then\n  $0\nfi\n\n\n\n" "iff - file tests" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/iff" nil nil)
                       ("if.method" "if ${1:fn}; then\n  $0\nfi" "if - function" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/if.method" nil nil)
                       ("if" "if [[ $1 ]]; then\n  $0\nfi\n" "if - Other" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/if" nil nil)
                       ("fun" "function ${1:name}() {\n  $0\n}\n" "function" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/fun" nil nil)
                       ("for" "for ${1:variable} in \"\\${${2:collection}[@]}\"; do\n  $0\ndone\n" "for" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/for" nil nil)
                       ("!" "#!/usr/bin/env `(let ((found (ca-all-asscs interpreter-mode-alist major-mode))) (if found (yas/choose-value found) \"\"))`$0\n\n" "bang" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/bang" nil nil)
                       ("al" "alias ${1:name}='$0'" "alias" nil nil nil "/Users/jason/.emacs.d/snippets/sh-mode/al" nil nil)))


;;; Do not edit! File generated at Sat Nov  7 12:16:41 2015
